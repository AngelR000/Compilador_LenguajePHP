/* The following code was generated by JFlex 1.6.1 */

package lexico;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/angel/OneDrive/Documentos/7mo/Traductores/jflex_/src/codigo/Lexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\44\1\60"+
    "\1\71\1\0\1\10\1\62\1\56\1\46\1\63\1\64\1\5\1\54"+
    "\1\45\1\55\1\0\1\4\1\11\11\12\1\47\1\53\1\50\1\61"+
    "\1\51\1\52\1\0\32\6\1\67\1\72\1\70\1\0\1\17\1\0"+
    "\1\14\1\27\1\20\1\32\1\25\1\36\1\42\1\13\1\24\1\6"+
    "\1\34\1\15\1\22\1\31\1\21\1\23\1\43\1\26\1\30\1\16"+
    "\1\35\1\40\1\37\1\41\1\33\1\6\1\65\1\57\1\66\1\0"+
    "\41\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0"+
    "\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0"+
    "\5\6\7\0\1\6\1\0\1\6\21\0\160\7\5\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\6\6\0\1\6\1\0\3\6\1\0\1\6"+
    "\1\0\24\6\1\0\123\6\1\0\213\6\1\0\5\7\2\0\246\6"+
    "\1\0\46\6\2\0\1\6\6\0\51\6\6\0\1\6\1\0\55\7"+
    "\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\10\0\33\6"+
    "\4\0\4\6\15\0\6\7\5\0\1\6\4\0\13\7\1\0\1\7"+
    "\3\0\53\6\37\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7"+
    "\1\0\6\7\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0"+
    "\1\6\17\0\1\7\1\6\1\7\36\6\33\7\2\0\131\6\13\7"+
    "\1\6\16\0\12\7\41\6\11\7\2\6\4\0\1\6\2\0\1\7"+
    "\30\6\4\7\1\6\11\7\1\6\3\7\1\6\5\7\22\0\31\6"+
    "\3\7\4\0\13\6\5\0\30\6\1\0\6\6\1\0\2\7\6\0"+
    "\10\7\52\6\72\7\66\6\3\7\1\6\22\7\1\6\7\7\12\6"+
    "\2\7\2\0\12\7\1\0\20\6\3\7\1\0\10\6\2\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7"+
    "\1\6\7\7\2\0\2\7\2\0\3\7\1\6\10\0\1\7\4\0"+
    "\2\6\1\0\3\6\2\7\2\0\12\7\4\6\7\0\2\6\1\0"+
    "\1\7\2\0\3\7\1\0\6\6\4\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0"+
    "\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0"+
    "\1\6\7\0\14\7\3\6\1\7\13\0\3\7\1\0\11\6\1\0"+
    "\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0"+
    "\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6\17\0"+
    "\2\6\2\7\2\0\12\7\1\0\1\6\7\0\1\6\6\7\1\0"+
    "\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0"+
    "\3\7\7\0\3\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7"+
    "\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0"+
    "\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0"+
    "\3\6\3\0\14\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0"+
    "\1\6\6\0\1\7\16\0\12\7\11\0\1\6\6\0\5\7\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\20\6\2\0\1\7\1\6\7\7"+
    "\1\0\3\7\1\0\4\7\7\0\2\7\1\0\3\6\2\0\1\6"+
    "\2\0\2\6\2\7\2\0\12\7\20\0\1\6\3\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7"+
    "\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\6\0\2\6"+
    "\1\0\2\6\2\7\2\0\12\7\1\0\2\6\15\0\4\7\11\6"+
    "\1\0\3\6\1\0\51\6\2\7\1\6\7\7\1\0\3\7\1\0"+
    "\4\7\1\6\5\0\3\6\1\7\7\0\3\6\2\7\2\0\12\7"+
    "\12\0\6\6\1\0\3\7\1\0\22\6\3\0\30\6\1\0\11\6"+
    "\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7"+
    "\1\0\10\7\6\0\12\7\2\0\2\7\15\0\60\6\1\7\2\6"+
    "\7\7\4\0\10\6\10\7\1\0\12\7\47\0\2\6\1\0\1\6"+
    "\1\0\5\6\1\0\30\6\1\0\1\6\1\0\12\6\1\7\2\6"+
    "\11\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7"+
    "\2\0\4\6\40\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7"+
    "\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0\44\6\4\0"+
    "\24\7\1\0\2\7\5\6\13\7\1\0\44\7\11\0\1\7\71\0"+
    "\53\6\24\7\1\6\12\7\6\0\6\6\4\7\4\6\3\7\1\6"+
    "\3\7\2\6\7\7\3\6\4\7\15\6\14\7\1\6\17\7\2\0"+
    "\46\6\1\0\1\6\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0"+
    "\4\6\2\0\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0"+
    "\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0\103\6\2\0"+
    "\3\7\40\0\20\6\20\0\126\6\2\0\6\6\3\0\u026c\6\2\0"+
    "\21\6\1\0\32\6\5\0\113\6\3\0\13\6\7\0\22\6\4\7"+
    "\11\0\23\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6"+
    "\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7"+
    "\2\0\12\7\41\0\17\7\6\0\131\6\7\0\5\6\2\7\42\6"+
    "\1\7\1\6\5\0\106\6\12\0\37\6\1\0\14\7\4\0\14\7"+
    "\12\0\12\7\36\6\2\0\5\6\13\0\54\6\4\0\32\6\6\0"+
    "\12\7\46\0\27\6\5\7\4\0\65\6\12\7\1\0\35\7\2\0"+
    "\13\7\6\0\12\7\15\0\1\6\10\0\16\7\1\0\20\7\61\0"+
    "\5\7\57\6\21\7\10\6\3\0\12\7\21\0\11\7\14\0\3\7"+
    "\36\6\15\7\2\6\12\7\54\6\16\7\14\0\44\6\24\7\10\0"+
    "\12\7\3\0\3\6\12\7\44\6\2\0\11\6\7\0\53\6\2\0"+
    "\3\6\20\0\3\7\1\0\25\7\4\6\1\7\6\6\1\7\2\6"+
    "\3\7\1\6\5\0\300\6\100\7\u0116\6\2\0\6\6\2\0\46\6"+
    "\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6"+
    "\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6"+
    "\1\0\7\6\16\0\5\7\32\0\5\7\20\0\2\6\23\0\1\6"+
    "\13\0\5\7\1\0\12\7\1\0\1\6\15\0\1\6\20\0\15\6"+
    "\3\0\41\6\17\0\15\7\4\0\1\7\3\0\14\7\21\0\1\6"+
    "\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6\2\0\4\6"+
    "\5\0\5\6\4\0\1\6\21\0\51\6\u0a77\0\345\6\6\0\4\6"+
    "\3\7\2\6\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6"+
    "\7\0\1\6\17\0\1\7\27\6\11\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7"+
    "\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6"+
    "\1\0\132\6\1\0\4\6\5\0\53\6\1\0\136\6\21\0\40\6"+
    "\60\0\20\6\u0200\0\u19c0\6\100\0\u568d\6\103\0\56\6\2\0\u010d\6"+
    "\3\0\20\6\12\7\2\6\24\0\57\6\1\7\4\0\12\7\1\0"+
    "\37\6\2\7\120\6\2\7\45\0\11\6\2\0\147\6\2\0\100\6"+
    "\5\0\2\6\1\0\1\6\1\0\5\6\30\0\20\6\1\7\3\6"+
    "\1\7\4\6\1\7\27\6\5\7\4\0\1\7\13\0\1\6\7\0"+
    "\64\6\14\0\2\7\62\6\22\7\12\0\12\7\6\0\22\7\6\6"+
    "\3\0\1\6\1\0\2\6\13\7\34\6\10\7\2\0\27\6\15\7"+
    "\14\0\35\6\3\0\4\7\57\6\16\7\16\0\1\6\12\7\6\0"+
    "\5\6\1\7\12\6\12\7\5\6\1\0\51\6\16\7\11\0\3\6"+
    "\1\7\10\6\2\7\2\0\12\7\6\0\27\6\3\0\1\6\3\7"+
    "\62\6\1\7\1\6\3\7\2\6\2\7\5\6\2\7\1\6\1\7"+
    "\1\6\30\0\3\6\2\0\13\6\5\7\2\0\3\6\2\7\12\0"+
    "\6\6\2\0\6\6\2\0\6\6\11\0\7\6\1\0\7\6\1\0"+
    "\53\6\1\0\16\6\6\0\163\6\10\7\1\0\2\7\2\0\12\7"+
    "\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6"+
    "\46\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6"+
    "\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6"+
    "\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7"+
    "\20\0\20\7\3\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6"+
    "\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6"+
    "\4\0\1\6\1\0\32\6\13\0\131\6\3\0\6\6\2\0\6\6"+
    "\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7"+
    "\4\0\14\6\1\0\32\6\1\0\23\6\1\0\2\6\1\0\17\6"+
    "\2\0\16\6\42\0\173\6\105\0\65\6\210\0\1\7\202\0\35\6"+
    "\3\0\61\6\17\0\1\7\37\0\40\6\15\0\36\6\5\0\46\6"+
    "\5\7\5\0\36\6\2\0\44\6\4\0\10\6\1\0\5\6\52\0"+
    "\236\6\2\0\12\7\6\0\44\6\4\0\44\6\4\0\50\6\10\0"+
    "\64\6\14\0\13\6\1\0\17\6\1\0\7\6\1\0\2\6\1\0"+
    "\13\6\1\0\17\6\1\0\7\6\1\0\2\6\103\0\u0137\6\11\0"+
    "\26\6\12\0\10\6\30\0\6\6\1\0\52\6\1\0\11\6\105\0"+
    "\6\6\2\0\1\6\1\0\54\6\1\0\2\6\3\0\1\6\2\0"+
    "\27\6\12\0\27\6\11\0\37\6\101\0\23\6\1\0\2\6\12\0"+
    "\26\6\12\0\32\6\106\0\70\6\6\0\2\6\100\0\1\6\3\7"+
    "\1\0\2\7\5\0\4\7\4\6\1\0\3\6\1\0\35\6\2\0"+
    "\3\7\4\0\1\7\40\0\35\6\3\0\35\6\43\0\10\6\1\0"+
    "\34\6\2\7\31\0\66\6\12\0\26\6\12\0\23\6\15\0\22\6"+
    "\156\0\111\6\67\0\63\6\15\0\63\6\15\0\44\6\4\7\10\0"+
    "\12\7\u0146\0\52\6\1\0\2\7\3\0\2\6\116\0\35\6\12\0"+
    "\1\6\10\0\26\6\13\7\37\0\22\6\4\7\52\0\25\6\33\0"+
    "\27\6\11\0\3\7\65\6\17\7\37\0\13\7\2\6\2\7\1\6"+
    "\11\0\4\7\55\6\13\7\2\0\1\7\4\0\1\7\12\0\1\7"+
    "\2\0\31\6\7\0\12\7\6\0\3\7\44\6\16\7\1\0\12\7"+
    "\4\0\1\6\2\7\1\6\10\0\43\6\1\7\2\0\1\6\11\0"+
    "\3\7\60\6\16\7\4\6\4\0\4\7\1\0\14\7\1\6\1\0"+
    "\1\6\43\0\22\6\1\0\31\6\14\7\6\0\1\7\101\0\7\6"+
    "\1\0\1\6\1\0\4\6\1\0\17\6\1\0\12\6\7\0\57\6"+
    "\14\7\5\0\12\7\6\0\4\7\1\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\5\6\1\0\2\7\1\6"+
    "\7\7\2\0\2\7\2\0\3\7\2\0\1\6\6\0\1\7\5\0"+
    "\5\6\2\7\2\0\7\7\3\0\5\7\213\0\65\6\22\7\4\6"+
    "\5\0\12\7\4\0\1\7\3\6\36\0\60\6\24\7\2\6\1\0"+
    "\1\6\10\0\12\7\246\0\57\6\7\7\2\0\11\7\27\0\4\6"+
    "\2\7\42\0\60\6\21\7\3\0\1\6\13\0\12\7\46\0\53\6"+
    "\15\7\1\6\7\0\12\7\66\0\33\6\2\0\17\7\4\0\12\7"+
    "\6\0\7\6\271\0\54\6\17\7\145\0\100\6\12\7\25\0\10\6"+
    "\2\0\1\6\2\0\10\6\1\0\2\6\1\0\30\6\6\7\1\0"+
    "\2\7\2\0\4\7\1\6\1\7\1\6\2\7\14\0\12\7\106\0"+
    "\10\6\2\0\47\6\7\7\2\0\7\7\1\6\1\0\1\6\1\7"+
    "\33\0\1\6\12\7\50\6\7\7\1\6\4\7\10\0\1\7\10\0"+
    "\1\6\13\7\56\6\20\7\3\0\1\6\22\0\111\6\u0107\0\11\6"+
    "\1\0\45\6\10\7\1\0\10\7\1\6\17\0\12\7\30\0\36\6"+
    "\2\0\26\7\1\0\16\7\111\0\7\6\1\0\2\6\1\0\46\6"+
    "\6\7\3\0\1\7\1\0\2\7\1\0\7\7\1\6\1\7\10\0"+
    "\12\7\6\0\6\6\1\0\2\6\1\0\40\6\5\7\1\0\2\7"+
    "\1\0\5\7\1\6\7\0\12\7\u0136\0\23\6\4\7\271\0\1\6"+
    "\54\0\4\6\37\0\u039a\6\146\0\157\6\21\0\304\6\u0a4c\0\141\6"+
    "\17\0\u042f\6\1\0\11\7\u0fc7\0\u0247\6\u21b9\0\u0239\6\7\0\37\6"+
    "\1\0\12\7\6\0\117\6\1\0\12\7\6\0\36\6\2\0\5\7"+
    "\13\0\60\6\7\7\11\0\4\6\14\0\12\7\11\0\25\6\5\0"+
    "\23\6\u02b0\0\100\6\200\0\113\6\4\0\1\7\1\6\67\7\7\0"+
    "\4\7\15\6\100\0\2\6\1\0\1\6\1\7\13\0\2\7\16\0"+
    "\u17f8\6\10\0\u04d6\6\52\0\11\6\u22e7\0\4\6\1\0\7\6\1\0"+
    "\2\6\1\0\u0123\6\55\0\3\6\21\0\4\6\10\0\u018c\6\u0904\0"+
    "\153\6\5\0\15\6\3\0\11\6\7\0\12\6\3\0\2\7\1\0"+
    "\4\7\u125c\0\56\7\2\0\27\7\u021e\0\5\7\3\0\26\7\2\0"+
    "\7\7\36\0\4\7\224\0\3\7\u01bb\0\125\6\1\0\107\6\1\0"+
    "\2\6\2\0\1\6\2\0\2\6\2\0\4\6\1\0\14\6\1\0"+
    "\1\6\1\0\7\6\1\0\101\6\1\0\4\6\2\0\10\6\1\0"+
    "\7\6\1\0\34\6\1\0\4\6\1\0\5\6\1\0\1\6\3\0"+
    "\7\6\1\0\u0154\6\2\0\31\6\1\0\31\6\1\0\37\6\1\0"+
    "\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0"+
    "\37\6\1\0\31\6\1\0\10\6\2\0\62\7\u0200\0\67\7\4\0"+
    "\62\7\10\0\1\7\16\0\1\7\26\0\5\7\1\0\17\7\u0450\0"+
    "\37\6\341\0\7\7\1\0\21\7\2\0\7\7\1\0\2\7\1\0"+
    "\5\7\325\0\55\6\3\0\7\7\7\6\2\0\12\7\4\0\1\6"+
    "\u0141\0\36\6\1\7\21\0\54\6\16\7\5\0\1\6\u04e0\0\7\6"+
    "\1\0\4\6\1\0\2\6\1\0\17\6\1\0\305\6\13\0\7\7"+
    "\51\0\104\6\7\7\1\6\4\0\12\7\u0356\0\1\6\u014f\0\4\6"+
    "\1\0\33\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0\12\6"+
    "\1\0\4\6\1\0\1\6\1\0\1\6\6\0\1\6\4\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\3\6\1\0\2\6\1\0\1\6"+
    "\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\2\6\1\0\1\6\2\0\4\6\1\0\7\6\1\0\4\6"+
    "\1\0\4\6\1\0\1\6\1\0\12\6\1\0\21\6\5\0\3\6"+
    "\1\0\5\6\1\0\21\6\u0d34\0\12\7\u0406\0\ua6e0\6\40\0\u1039\6"+
    "\7\0\336\6\2\0\u1682\6\16\0\u1d31\6\u0c1f\0\u021e\6\u05e2\0\u134b\6"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uecc0\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\1\1\3\1\4\2\5\26\4"+
    "\1\2\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\3\17\1\20\1\1\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\1\1\30\1\2\1\0"+
    "\1\20\3\4\1\31\7\4\1\32\7\4\1\33\15\4"+
    "\1\34\16\4\1\35\2\0\1\36\1\37\1\17\1\40"+
    "\1\41\1\42\1\43\1\44\2\0\3\4\1\45\3\4"+
    "\1\46\7\4\1\47\26\4\1\50\1\51\3\4\1\52"+
    "\1\4\1\53\4\4\1\54\1\55\2\4\3\0\1\2"+
    "\3\4\1\56\4\4\1\57\16\4\1\60\1\61\1\62"+
    "\6\4\1\63\1\4\1\64\13\4\1\65\3\4\1\66"+
    "\2\0\1\4\1\67\1\4\1\70\1\71\1\4\1\72"+
    "\1\73\1\74\1\4\1\75\1\76\1\4\1\77\3\4"+
    "\1\100\5\4\1\101\1\102\7\4\1\103\5\4\1\104"+
    "\1\105\1\106\1\4\1\107\1\4\1\110\6\4\1\111"+
    "\5\4\1\112\2\4\1\113\2\4\1\114\1\4\1\115"+
    "\1\116\5\4\1\117\5\4\1\120\2\4\1\121\6\4"+
    "\1\122\1\123\1\4\1\124\1\125\1\126\2\4\1\127"+
    "\1\130\1\131\11\4\1\132\2\4\1\133\1\4\1\134"+
    "\1\4\1\135\2\4\1\136\1\137\3\4\1\140\1\4"+
    "\1\141\1\4\1\142\1\143\1\144\5\4\1\145\1\146"+
    "\1\147";

  private static int [] zzUnpackAction() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\166\0\354\0\u0127\0\u0162"+
    "\0\166\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af"+
    "\0\u06ea\0\166\0\166\0\166\0\u0725\0\u0760\0\166\0\166"+
    "\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887\0\u0887\0\u0127\0\166"+
    "\0\166\0\166\0\166\0\166\0\166\0\166\0\u08c2\0\u08fd"+
    "\0\u0938\0\u0973\0\166\0\u09ae\0\u09e9\0\u0a24\0\u0162\0\u0a5f"+
    "\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0162\0\u0bfc"+
    "\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0162\0\u0d99"+
    "\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71"+
    "\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u0162\0\u1098\0\u10d3\0\u110e"+
    "\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6"+
    "\0\u1321\0\u135c\0\u1397\0\166\0\u13d2\0\u140d\0\166\0\166"+
    "\0\166\0\u08c2\0\166\0\166\0\166\0\166\0\u1448\0\u1483"+
    "\0\u14be\0\u14f9\0\u1534\0\u0162\0\u156f\0\u15aa\0\u15e5\0\u0162"+
    "\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u0162"+
    "\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a"+
    "\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32"+
    "\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u0162\0\u0162"+
    "\0\u1ccf\0\u1d0a\0\u1d45\0\u0162\0\u1d80\0\u0162\0\u1dbb\0\u1df6"+
    "\0\u1e31\0\u1e6c\0\u0162\0\u0162\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58"+
    "\0\u1f93\0\u1448\0\u1fce\0\u2009\0\u2044\0\u0162\0\u207f\0\u20ba"+
    "\0\u20f5\0\u2130\0\u0162\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257"+
    "\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f"+
    "\0\u246a\0\u0162\0\u24a5\0\u0162\0\u24e0\0\u251b\0\u2556\0\u2591"+
    "\0\u25cc\0\u2607\0\u0162\0\u2642\0\u0162\0\u267d\0\u26b8\0\u26f3"+
    "\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb"+
    "\0\u0162\0\u2906\0\u2941\0\u297c\0\u0162\0\u29b7\0\u29f2\0\u2a2d"+
    "\0\u0162\0\u2a68\0\u0162\0\u0162\0\u2aa3\0\u0162\0\u0162\0\u0162"+
    "\0\u2ade\0\u0162\0\u0162\0\u2b19\0\u0162\0\u2b54\0\u2b8f\0\u2bca"+
    "\0\u0162\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u0162\0\u0162"+
    "\0\u2d2c\0\u2d67\0\u2da2\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u0162"+
    "\0\u2ec9\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5\0\u0162\0\u0162\0\u2ff0"+
    "\0\u302b\0\u0162\0\u3066\0\166\0\u30a1\0\u30dc\0\u3117\0\u3152"+
    "\0\u318d\0\u31c8\0\u0162\0\u3203\0\u323e\0\u3279\0\u32b4\0\u32ef"+
    "\0\u0162\0\u332a\0\u3365\0\u33a0\0\u33db\0\u3416\0\u0162\0\u3451"+
    "\0\u0162\0\u0162\0\u348c\0\u34c7\0\u3502\0\u353d\0\u3578\0\u0162"+
    "\0\u35b3\0\u35ee\0\u3629\0\u3664\0\u369f\0\u0162\0\u36da\0\u3715"+
    "\0\u3750\0\u378b\0\u37c6\0\u3801\0\u383c\0\u3877\0\u38b2\0\u0162"+
    "\0\u38ed\0\u3928\0\u0162\0\u0162\0\u0162\0\u3963\0\u399e\0\u0162"+
    "\0\u0162\0\u0162\0\u39d9\0\u3a14\0\u3a4f\0\u3a8a\0\u3ac5\0\u3b00"+
    "\0\u3b3b\0\u3b76\0\u3bb1\0\u0162\0\u3bec\0\u3c27\0\u0162\0\u3c62"+
    "\0\u0162\0\u3c9d\0\u0162\0\u3cd8\0\u3d13\0\u0162\0\u0162\0\u3d4e"+
    "\0\u3d89\0\u3dc4\0\u0162\0\u3dff\0\u0162\0\u3e3a\0\u0162\0\u0162"+
    "\0\u0162\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26\0\u3f61\0\u0162\0\u0162"+
    "\0\u0162";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\3\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\10\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\10\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\10\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\72\3\1\67\1\70\75\0\1\5\74\0\1\71"+
    "\1\72\53\0\1\73\72\0\1\73\17\0\36\10\40\0"+
    "\2\12\66\0\6\10\1\74\27\10\35\0\20\10\1\75"+
    "\1\76\1\77\1\100\12\10\35\0\16\10\1\101\17\10"+
    "\35\0\5\10\1\102\12\10\1\103\15\10\35\0\6\10"+
    "\1\104\1\105\3\10\1\106\22\10\35\0\20\10\1\107"+
    "\15\10\35\0\6\10\1\110\27\10\35\0\5\10\1\111"+
    "\12\10\1\112\6\10\1\113\6\10\35\0\14\10\1\114"+
    "\5\10\1\115\1\116\4\10\1\117\5\10\35\0\6\10"+
    "\1\120\1\121\2\10\1\122\1\10\1\123\6\10\1\124"+
    "\6\10\1\125\1\126\2\10\35\0\17\10\1\127\16\10"+
    "\35\0\20\10\1\130\15\10\35\0\10\10\1\131\20\10"+
    "\1\132\4\10\35\0\6\10\1\133\10\10\1\134\16\10"+
    "\35\0\13\10\1\135\2\10\1\136\1\137\16\10\35\0"+
    "\16\10\1\140\17\10\35\0\22\10\1\141\1\142\12\10"+
    "\35\0\13\10\1\143\2\10\1\144\1\10\1\145\6\10"+
    "\1\146\6\10\35\0\5\10\1\147\30\10\35\0\6\10"+
    "\1\150\27\10\35\0\13\10\1\151\22\10\35\0\7\10"+
    "\1\152\3\10\1\153\22\10\37\0\1\154\5\0\1\155"+
    "\17\0\1\156\104\0\1\157\10\0\1\157\62\0\1\157"+
    "\7\0\1\157\65\0\1\160\4\0\1\73\66\0\1\160"+
    "\3\0\1\73\67\0\1\161\73\0\1\161\74\0\1\157"+
    "\11\0\1\162\2\0\66\162\20\0\1\163\7\0\1\164"+
    "\2\0\1\165\37\0\1\166\1\0\1\71\1\4\1\5"+
    "\70\71\5\167\1\170\65\167\6\0\7\10\1\171\26\10"+
    "\35\0\20\10\1\172\15\10\35\0\22\10\1\173\13\10"+
    "\35\0\24\10\1\174\11\10\35\0\22\10\1\175\13\10"+
    "\35\0\20\10\1\176\15\10\35\0\6\10\1\177\16\10"+
    "\1\200\10\10\35\0\7\10\1\201\1\202\11\10\1\203"+
    "\13\10\35\0\6\10\1\204\4\10\1\205\22\10\35\0"+
    "\23\10\1\206\12\10\35\0\10\10\1\207\25\10\35\0"+
    "\15\10\1\210\20\10\35\0\13\10\1\211\2\10\1\212"+
    "\17\10\35\0\21\10\1\213\14\10\35\0\15\10\1\214"+
    "\20\10\35\0\22\10\1\215\13\10\35\0\10\10\1\216"+
    "\1\10\1\217\7\10\1\220\13\10\35\0\12\10\1\221"+
    "\23\10\35\0\22\10\1\222\13\10\35\0\5\10\1\223"+
    "\30\10\35\0\15\10\1\224\20\10\35\0\24\10\1\225"+
    "\11\10\35\0\6\10\1\226\27\10\35\0\10\10\1\227"+
    "\5\10\1\230\17\10\35\0\10\10\1\231\24\10\1\232"+
    "\35\0\17\10\1\233\16\10\35\0\6\10\1\234\27\10"+
    "\35\0\16\10\1\235\17\10\35\0\14\10\1\236\21\10"+
    "\35\0\31\10\1\237\4\10\35\0\17\10\1\240\16\10"+
    "\35\0\12\10\1\241\15\10\1\242\5\10\35\0\17\10"+
    "\1\243\16\10\35\0\17\10\1\244\16\10\35\0\22\10"+
    "\1\245\13\10\35\0\20\10\1\246\15\10\35\0\23\10"+
    "\1\247\12\10\35\0\13\10\1\250\22\10\35\0\23\10"+
    "\1\251\12\10\35\0\16\10\1\252\17\10\35\0\20\10"+
    "\1\253\15\10\35\0\20\10\1\254\15\10\35\0\13\10"+
    "\1\255\22\10\35\0\10\10\1\256\25\10\55\0\1\257"+
    "\60\0\1\260\56\0\5\167\1\261\71\167\1\262\1\261"+
    "\65\167\6\0\10\10\1\263\25\10\35\0\6\10\1\264"+
    "\27\10\35\0\10\10\1\265\25\10\35\0\10\10\1\266"+
    "\25\10\35\0\13\10\1\267\22\10\35\0\16\10\1\270"+
    "\17\10\35\0\7\10\1\271\26\10\35\0\12\10\1\272"+
    "\23\10\35\0\17\10\1\273\16\10\35\0\22\10\1\274"+
    "\13\10\35\0\23\10\1\275\12\10\35\0\10\10\1\276"+
    "\11\10\1\277\13\10\35\0\12\10\1\300\23\10\35\0"+
    "\10\10\1\301\25\10\35\0\23\10\1\302\6\10\1\303"+
    "\3\10\35\0\7\10\1\304\26\10\35\0\7\10\1\305"+
    "\26\10\35\0\17\10\1\306\16\10\35\0\17\10\1\307"+
    "\16\10\35\0\7\10\1\310\26\10\35\0\10\10\1\311"+
    "\25\10\35\0\5\10\1\312\30\10\35\0\17\10\1\313"+
    "\16\10\35\0\13\10\1\314\22\10\35\0\10\10\1\315"+
    "\25\10\35\0\16\10\1\316\3\10\1\317\1\10\1\320"+
    "\3\10\1\321\1\322\4\10\35\0\7\10\1\323\26\10"+
    "\35\0\17\10\1\324\16\10\35\0\10\10\1\325\25\10"+
    "\35\0\27\10\1\326\6\10\35\0\27\10\1\327\6\10"+
    "\35\0\6\10\1\330\27\10\35\0\10\10\1\331\25\10"+
    "\35\0\10\10\1\332\25\10\35\0\17\10\1\333\16\10"+
    "\35\0\7\10\1\334\26\10\35\0\6\10\1\335\27\10"+
    "\35\0\7\10\1\336\26\10\35\0\17\10\1\337\16\10"+
    "\35\0\6\10\1\340\27\10\35\0\14\10\1\341\21\10"+
    "\35\0\12\10\1\342\23\10\35\0\7\10\1\343\26\10"+
    "\35\0\21\10\1\344\14\10\35\0\13\10\1\345\22\10"+
    "\64\0\1\346\52\0\1\347\55\0\4\167\1\5\1\261"+
    "\65\167\6\0\11\10\1\350\24\10\35\0\25\10\1\351"+
    "\10\10\35\0\20\10\1\352\15\10\35\0\31\10\1\353"+
    "\4\10\35\0\10\10\1\354\25\10\35\0\6\10\1\355"+
    "\27\10\35\0\5\10\1\356\30\10\35\0\22\10\1\357"+
    "\13\10\35\0\17\10\1\360\16\10\35\0\16\10\1\361"+
    "\17\10\35\0\10\10\1\362\25\10\35\0\5\10\1\363"+
    "\30\10\35\0\17\10\1\364\16\10\35\0\10\10\1\365"+
    "\25\10\35\0\6\10\1\366\27\10\35\0\16\10\1\367"+
    "\17\10\35\0\17\10\1\370\16\10\35\0\10\10\1\371"+
    "\25\10\35\0\20\10\1\372\15\10\35\0\27\10\1\373"+
    "\6\10\35\0\6\10\1\374\10\10\1\375\16\10\35\0"+
    "\16\10\1\376\17\10\35\0\25\10\1\377\10\10\35\0"+
    "\30\10\1\u0100\5\10\35\0\31\10\1\u0101\4\10\35\0"+
    "\17\10\1\u0102\16\10\35\0\13\10\1\u0103\22\10\35\0"+
    "\5\10\1\u0104\30\10\35\0\23\10\1\u0105\12\10\35\0"+
    "\20\10\1\u0106\15\10\35\0\16\10\1\u0107\17\10\35\0"+
    "\26\10\1\u0108\7\10\35\0\16\10\1\u0109\17\10\35\0"+
    "\12\10\1\u010a\23\10\35\0\22\10\1\u010b\13\10\35\0"+
    "\6\10\1\u010c\27\10\35\0\27\10\1\u010d\6\10\35\0"+
    "\24\10\1\u010e\11\10\35\0\10\10\1\u010f\25\10\35\0"+
    "\7\10\1\u0110\26\10\35\0\10\10\1\u0111\25\10\35\0"+
    "\17\10\1\u0112\16\10\35\0\6\10\1\u0113\27\10\54\0"+
    "\1\u0114\75\0\1\346\50\0\12\10\1\u0115\23\10\35\0"+
    "\6\10\1\u0116\27\10\35\0\21\10\1\u0117\14\10\35\0"+
    "\23\10\1\u0118\12\10\35\0\12\10\1\u0119\23\10\35\0"+
    "\10\10\1\u011a\25\10\35\0\12\10\1\u011b\23\10\35\0"+
    "\14\10\1\u011c\21\10\35\0\30\10\1\u011d\5\10\35\0"+
    "\24\10\1\u011e\11\10\35\0\23\10\1\u011f\12\10\35\0"+
    "\6\10\1\u0120\27\10\35\0\30\10\1\u0121\5\10\35\0"+
    "\16\10\1\u0122\17\10\35\0\12\10\1\u0123\23\10\35\0"+
    "\20\10\1\u0124\15\10\35\0\16\10\1\u0125\17\10\35\0"+
    "\24\10\1\u0126\11\10\35\0\23\10\1\u0127\12\10\35\0"+
    "\20\10\1\u0128\15\10\35\0\12\10\1\u0129\23\10\35\0"+
    "\5\10\1\u012a\30\10\35\0\15\10\1\u012b\20\10\35\0"+
    "\20\10\1\u012c\15\10\35\0\7\10\1\u012d\26\10\35\0"+
    "\7\10\1\u012e\26\10\35\0\16\10\1\u012f\17\10\35\0"+
    "\7\10\1\u0130\26\10\35\0\13\10\1\u0131\22\10\35\0"+
    "\12\10\1\u0132\23\10\35\0\7\10\1\u0133\26\10\35\0"+
    "\27\10\1\u0134\6\10\35\0\10\10\1\u0135\25\10\35\0"+
    "\17\10\1\u0136\16\10\35\0\17\10\1\u0137\16\10\35\0"+
    "\6\10\1\u0138\27\10\35\0\17\10\1\u0139\16\10\35\0"+
    "\12\10\1\u013a\23\10\35\0\24\10\1\u013b\11\10\35\0"+
    "\10\10\1\u013c\25\10\35\0\7\10\1\u013d\26\10\35\0"+
    "\17\10\1\u013e\16\10\35\0\7\10\1\u013f\26\10\35\0"+
    "\22\10\1\u0140\13\10\35\0\17\10\1\u0141\16\10\35\0"+
    "\6\10\1\u0142\27\10\35\0\17\10\1\u0143\16\10\35\0"+
    "\10\10\1\u0144\25\10\35\0\25\10\1\u0145\10\10\35\0"+
    "\13\10\1\u0146\22\10\35\0\14\10\1\u0147\21\10\35\0"+
    "\10\10\1\u0148\25\10\35\0\17\10\1\u0149\16\10\35\0"+
    "\17\10\1\u014a\16\10\35\0\17\10\1\u014b\16\10\35\0"+
    "\23\10\1\u014c\12\10\35\0\12\10\1\u014d\23\10\35\0"+
    "\11\10\1\u014e\24\10\35\0\17\10\1\u014f\16\10\35\0"+
    "\13\10\1\u0150\22\10\35\0\12\10\1\u0151\23\10\35\0"+
    "\6\10\1\u0152\27\10\35\0\6\10\1\u0153\27\10\35\0"+
    "\17\10\1\u0154\16\10\35\0\11\10\1\u0155\24\10\35\0"+
    "\12\10\1\u0156\23\10\35\0\23\10\1\u0157\12\10\35\0"+
    "\15\10\1\u0158\20\10\35\0\24\10\1\u0159\11\10\35\0"+
    "\10\10\1\u015a\25\10\35\0\17\10\1\u015b\16\10\35\0"+
    "\13\10\1\u015c\22\10\35\0\13\10\1\u015d\22\10\35\0"+
    "\30\10\1\u015e\5\10\35\0\5\10\1\u015f\30\10\35\0"+
    "\20\10\1\u0160\15\10\35\0\12\10\1\u0161\23\10\35\0"+
    "\13\10\1\u0162\22\10\35\0\17\10\1\u0163\16\10\35\0"+
    "\16\10\1\u0164\17\10\35\0\22\10\1\u0165\13\10\35\0"+
    "\23\10\1\u0166\12\10\35\0\30\10\1\u0167\5\10\35\0"+
    "\17\10\1\u0168\16\10\35\0\5\10\1\u0169\30\10\35\0"+
    "\23\10\1\u016a\12\10\35\0\7\10\1\u016b\26\10\35\0"+
    "\12\10\1\u016c\23\10\35\0\12\10\1\u016d\23\10\35\0"+
    "\17\10\1\u016e\16\10\35\0\17\10\1\u016f\16\10\35\0"+
    "\17\10\1\u0170\16\10\35\0\20\10\1\u0171\15\10\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16284];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\3\1\1\11\30\1\3\11"+
    "\2\1\2\11\7\1\7\11\3\1\1\0\1\11\60\1"+
    "\1\11\2\0\3\11\1\1\4\11\2\0\66\1\3\0"+
    "\64\1\2\0\54\1\1\11\135\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[369];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
StringBuffer string = new StringBuffer();

private Symbol symbol(int type) {
return new Symbol(type, yyline, yycolumn);
}
private Symbol symbol(int type, Object value) {
return new Symbol(type, yyline, yycolumn, value);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3798) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character <"+
yytext()+">");
            }
          case 104: break;
          case 2: 
            { /* ignore */
            }
          case 105: break;
          case 3: 
            { return new Symbol(sym.MULTIPLICA,yytext());
            }
          case 106: break;
          case 4: 
            { return symbol(sym.IDENTIFIER,yytext());
            }
          case 107: break;
          case 5: 
            { return symbol(sym.DECINT,yytext());
            }
          case 108: break;
          case 6: 
            { return new Symbol(sym.COMA,yytext());
            }
          case 109: break;
          case 7: 
            { return new Symbol(sym.APOSTROFE,yytext());
            }
          case 110: break;
          case 8: 
            { return new Symbol(sym.DOSPUNTOS,yytext());
            }
          case 111: break;
          case 9: 
            { return new Symbol(sym.MENORQ,yytext());
            }
          case 112: break;
          case 10: 
            { return new Symbol(sym.MAYORQ,yytext());
            }
          case 113: break;
          case 11: 
            { return new Symbol(sym.PREGUNTA_A,yytext());
            }
          case 114: break;
          case 12: 
            { return new Symbol(sym.P_COMA,yytext());
            }
          case 115: break;
          case 13: 
            { return new Symbol(sym.SUMA,yytext());
            }
          case 116: break;
          case 14: 
            { return new Symbol(sym.RESTA,yytext());
            }
          case 117: break;
          case 15: 
            { return new Symbol(sym.OP_LOGICO,yytext());
            }
          case 118: break;
          case 16: 
            { return new Symbol(sym.OP_ATRIBUCION,yytext());
            }
          case 119: break;
          case 17: 
            { return new Symbol(sym.PARENTESIS_A,yytext());
            }
          case 120: break;
          case 18: 
            { return new Symbol(sym.PARENTESIS_C,yytext());
            }
          case 121: break;
          case 19: 
            { return new Symbol(sym.LLAVE_A,yytext());
            }
          case 122: break;
          case 20: 
            { return new Symbol(sym.LLAVE_C,yytext());
            }
          case 123: break;
          case 21: 
            { return new Symbol(sym.CORCHETE_A,yytext());
            }
          case 124: break;
          case 22: 
            { return new Symbol(sym.CORCHETE_C,yytext());
            }
          case 125: break;
          case 23: 
            { return new Symbol(sym.COMILLAS,yytext());
            }
          case 126: break;
          case 24: 
            { string.append('\\');
            }
          case 127: break;
          case 25: 
            { return new Symbol(sym.AS,yytext());
            }
          case 128: break;
          case 26: 
            { return new Symbol(sym.OR,yytext());
            }
          case 129: break;
          case 27: 
            { return new Symbol(sym.IF,yytext());
            }
          case 130: break;
          case 28: 
            { return new Symbol(sym.DO,yytext());
            }
          case 131: break;
          case 29: 
            { return new Symbol(sym.VARIABLE,yytext());
            }
          case 132: break;
          case 30: 
            { return new Symbol(sym.OP_RELACIONAL,yytext());
            }
          case 133: break;
          case 31: 
            { return new Symbol(sym.OP_INCREODEC,yytext());
            }
          case 134: break;
          case 32: 
            { string.append( yytext());
            }
          case 135: break;
          case 33: 
            { string.append('\t');
            }
          case 136: break;
          case 34: 
            { string.append('\r');
            }
          case 137: break;
          case 35: 
            { string.append('\n');
            }
          case 138: break;
          case 36: 
            { string.append('\"');
            }
          case 139: break;
          case 37: 
            { return new Symbol(sym.AND,yytext());
            }
          case 140: break;
          case 38: 
            { return new Symbol(sym.TRY,yytext());
            }
          case 141: break;
          case 39: 
            { return new Symbol(sym.PHP_I,yytext());
            }
          case 142: break;
          case 40: 
            { return new Symbol(sym.NEW,yytext());
            }
          case 143: break;
          case 41: 
            { return new Symbol(sym.DIE,yytext());
            }
          case 144: break;
          case 42: 
            { return new Symbol(sym.USE,yytext());
            }
          case 145: break;
          case 43: 
            { return new Symbol(sym.FOR,yytext());
            }
          case 146: break;
          case 44: 
            { return new Symbol(sym.VAR,yytext());
            }
          case 147: break;
          case 45: 
            { return new Symbol(sym.XOR,yytext());
            }
          case 148: break;
          case 46: 
            { return new Symbol(sym.LIST,yytext());
            }
          case 149: break;
          case 47: 
            { return new Symbol(sym.CASE,yytext());
            }
          case 150: break;
          case 48: 
            { return new Symbol(sym.EACH,yytext());
            }
          case 151: break;
          case 49: 
            { return new Symbol(sym.ELSE,yytext());
            }
          case 152: break;
          case 50: 
            { return new Symbol(sym.ECHO,yytext());
            }
          case 153: break;
          case 51: 
            { return new Symbol(sym.EVAL,yytext());
            }
          case 154: break;
          case 52: 
            { return new Symbol(sym.EXIT,yytext());
            }
          case 155: break;
          case 53: 
            { return new Symbol(sym.FROM,yytext());
            }
          case 156: break;
          case 54: 
            { return new Symbol(sym.GOTO,yytext());
            }
          case 157: break;
          case 55: 
            { return new Symbol(sym.ARRAY,yytext());
            }
          case 158: break;
          case 56: 
            { return new Symbol(sym.THROW,yytext());
            }
          case 159: break;
          case 57: 
            { return new Symbol(sym.TRAIT,yytext());
            }
          case 160: break;
          case 58: 
            { return new Symbol(sym.CATCH,yytext());
            }
          case 161: break;
          case 59: 
            { return new Symbol(sym.CLASS,yytext());
            }
          case 162: break;
          case 60: 
            { return new Symbol(sym.CLONE,yytext());
            }
          case 163: break;
          case 61: 
            { return new Symbol(sym.CONST,yytext());
            }
          case 164: break;
          case 62: 
            { return new Symbol(sym.MATCH,yytext());
            }
          case 165: break;
          case 63: 
            { return new Symbol(sym.PRINT,yytext());
            }
          case 166: break;
          case 64: 
            { return new Symbol(sym.ISSET,yytext());
            }
          case 167: break;
          case 65: 
            { return new Symbol(sym.EMPTY,yytext());
            }
          case 168: break;
          case 66: 
            { return new Symbol(sym.ENDIF,yytext());
            }
          case 169: break;
          case 67: 
            { return new Symbol(sym.BREAK,yytext());
            }
          case 170: break;
          case 68: 
            { return new Symbol(sym.YIELD,yytext());
            }
          case 171: break;
          case 69: 
            { return new Symbol(sym.UNSET,yytext());
            }
          case 172: break;
          case 70: 
            { return new Symbol(sym.FINAL,yytext());
            }
          case 173: break;
          case 71: 
            { return new Symbol(sym.WHILE,yytext());
            }
          case 174: break;
          case 72: 
            { return new Symbol(sym.OP_BOOL,yytext());
            }
          case 175: break;
          case 73: 
            { return new Symbol(sym.PUBLIC,yytext());
            }
          case 176: break;
          case 74: 
            { return new Symbol(sym.ELSEIF,yytext());
            }
          case 177: break;
          case 75: 
            { return new Symbol(sym.ENDFOR,yytext());
            }
          case 178: break;
          case 76: 
            { return new Symbol(sym.RETURN,yytext());
            }
          case 179: break;
          case 77: 
            { return new Symbol(sym.STATIC,yytext());
            }
          case 180: break;
          case 78: 
            { return new Symbol(sym.SWITCH,yytext());
            }
          case 181: break;
          case 79: 
            { return new Symbol(sym.GLOBAL,yytext());
            }
          case 182: break;
          case 80: 
            { return new Symbol(sym.PRIVATE,yytext());
            }
          case 183: break;
          case 81: 
            { return new Symbol(sym.INCLUDE,yytext());
            }
          case 184: break;
          case 82: 
            { return new Symbol(sym.EXTENDS,yytext());
            }
          case 185: break;
          case 83: 
            { return new Symbol(sym.REQUIRE,yytext());
            }
          case 186: break;
          case 84: 
            { return new Symbol(sym.DECLARE,yytext());
            }
          case 187: break;
          case 85: 
            { return new Symbol(sym.DEFAULT,yytext());
            }
          case 188: break;
          case 86: 
            { return new Symbol(sym.FINALLY,yytext());
            }
          case 189: break;
          case 87: 
            { return new Symbol(sym.ABSTRACT,yytext());
            }
          case 190: break;
          case 88: 
            { return new Symbol(sym.CALLABLE,yytext());
            }
          case 191: break;
          case 89: 
            { return new Symbol(sym.CONTINUE,yytext());
            }
          case 192: break;
          case 90: 
            { return new Symbol(sym.ENDWHILE,yytext());
            }
          case 193: break;
          case 91: 
            { return new Symbol(sym.FUNCTION,yytext());
            }
          case 194: break;
          case 92: 
            { return new Symbol(sym.PROTECTED,yytext());
            }
          case 195: break;
          case 93: 
            { return new Symbol(sym.INTERFACE,yytext());
            }
          case 196: break;
          case 94: 
            { return new Symbol(sym.INSTEADOF,yytext());
            }
          case 197: break;
          case 95: 
            { return new Symbol(sym.ENDSWITCH,yytext());
            }
          case 198: break;
          case 96: 
            { return new Symbol(sym.NAMESPACE,yytext());
            }
          case 199: break;
          case 97: 
            { return new Symbol(sym.IMPLEMENTS,yytext());
            }
          case 200: break;
          case 98: 
            { return new Symbol(sym.INSTANCEOF,yytext());
            }
          case 201: break;
          case 99: 
            { return new Symbol(sym.ENDDECLARE,yytext());
            }
          case 202: break;
          case 100: 
            { return new Symbol(sym.ENDFOREACH,yytext());
            }
          case 203: break;
          case 101: 
            { return new Symbol(sym.INCLUDE_ONCE,yytext());
            }
          case 204: break;
          case 102: 
            { return new Symbol(sym.REQUIRE_ONCE,yytext());
            }
          case 205: break;
          case 103: 
            { return new Symbol(sym.HALT_COMPILER,yytext());
            }
          case 206: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
