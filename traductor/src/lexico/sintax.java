
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package lexico;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\006\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\004\006\000\002\004\010\000" +
    "\002\004\006\000\002\004\010\000\002\004\006\000\002" +
    "\004\010\000\002\004\010\000\002\004\010\000\002\004" +
    "\010\000\002\004\010\000\002\022\006\000\002\022\005" +
    "\000\002\006\011\000\002\007\015\000\002\010\011\000" +
    "\002\011\013\000\002\012\011\000\002\016\011\000\002" +
    "\017\005\000\002\017\004\000\002\017\004\000\002\014" +
    "\011\000\002\020\010\000\002\021\004\000\002\021\005" +
    "\000\002\021\004\000\002\021\005\000\002\021\003\000" +
    "\002\021\003\000\002\015\003\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\006" +
    "\000\002\015\007\000\002\015\006\000\002\015\007\000" +
    "\002\005\011\000\002\005\012\000\002\013\012\000\002" +
    "\023\007\000\002\023\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\004\005\004\001\002\000\004\006\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\135\010\001\002\000\020\066\027\104\017\106" +
    "\031\107\012\110\013\123\023\142\024\001\002\000\026" +
    "\002\ufffa\025\ufffa\035\ufffa\066\ufffa\104\ufffa\106\ufffa\107" +
    "\ufffa\110\ufffa\123\ufffa\142\ufffa\001\002\000\004\022\255" +
    "\001\002\000\006\022\216\111\215\001\002\000\026\002" +
    "\ufffe\025\ufffe\035\ufffe\066\ufffe\104\ufffe\106\ufffe\107\ufffe" +
    "\110\ufffe\123\ufffe\142\ufffe\001\002\000\026\002\ufff6\025" +
    "\ufff6\035\ufff6\066\ufff6\104\ufff6\106\ufff6\107\ufff6\110\ufff6" +
    "\123\ufff6\142\ufff6\001\002\000\026\002\uffee\025\uffee\035" +
    "\uffee\066\uffee\104\uffee\106\uffee\107\uffee\110\uffee\123\uffee" +
    "\142\uffee\001\002\000\004\022\203\001\002\000\022\002" +
    "\001\066\027\104\017\106\031\107\012\110\013\123\023" +
    "\142\024\001\002\000\026\002\ufff2\025\ufff2\035\ufff2\066" +
    "\ufff2\104\ufff2\106\ufff2\107\ufff2\110\ufff2\123\ufff2\142\ufff2" +
    "\001\002\000\026\002\ufff8\025\ufff8\035\ufff8\066\ufff8\104" +
    "\ufff8\106\ufff8\107\ufff8\110\ufff8\123\ufff8\142\ufff8\001\002" +
    "\000\004\022\167\001\002\000\004\017\112\001\002\000" +
    "\026\002\ufff0\025\ufff0\035\ufff0\066\ufff0\104\ufff0\106\ufff0" +
    "\107\ufff0\110\ufff0\123\ufff0\142\ufff0\001\002\000\026\002" +
    "\ufff4\025\ufff4\035\ufff4\066\ufff4\104\ufff4\106\ufff4\107\ufff4" +
    "\110\ufff4\123\ufff4\142\ufff4\001\002\000\004\143\077\001" +
    "\002\000\026\002\ufffc\025\ufffc\035\ufffc\066\ufffc\104\ufffc" +
    "\106\ufffc\107\ufffc\110\ufffc\123\ufffc\142\ufffc\001\002\000" +
    "\004\024\032\001\002\000\020\066\027\104\017\106\031" +
    "\107\012\110\013\123\023\142\024\001\002\000\022\025" +
    "\037\066\027\104\017\106\031\107\012\110\013\123\023" +
    "\142\024\001\002\000\026\002\ufffb\025\ufffb\035\ufffb\066" +
    "\ufffb\104\ufffb\106\ufffb\107\ufffb\110\ufffb\123\ufffb\142\ufffb" +
    "\001\002\000\026\002\uffff\025\uffff\035\uffff\066\uffff\104" +
    "\uffff\106\uffff\107\uffff\110\uffff\123\uffff\142\uffff\001\002" +
    "\000\026\002\ufff7\025\ufff7\035\ufff7\066\ufff7\104\ufff7\106" +
    "\ufff7\107\ufff7\110\ufff7\123\ufff7\142\ufff7\001\002\000\004" +
    "\107\046\001\002\000\026\002\uffef\025\uffef\035\uffef\066" +
    "\uffef\104\uffef\106\uffef\107\uffef\110\uffef\123\uffef\142\uffef" +
    "\001\002\000\026\002\ufff3\025\ufff3\035\ufff3\066\ufff3\104" +
    "\ufff3\106\ufff3\107\ufff3\110\ufff3\123\ufff3\142\ufff3\001\002" +
    "\000\026\002\ufff9\025\ufff9\035\ufff9\066\ufff9\104\ufff9\106" +
    "\ufff9\107\ufff9\110\ufff9\123\ufff9\142\ufff9\001\002\000\026" +
    "\002\ufff1\025\ufff1\035\ufff1\066\ufff1\104\ufff1\106\ufff1\107" +
    "\ufff1\110\ufff1\123\ufff1\142\ufff1\001\002\000\026\002\ufff5" +
    "\025\ufff5\035\ufff5\066\ufff5\104\ufff5\106\ufff5\107\ufff5\110" +
    "\ufff5\123\ufff5\142\ufff5\001\002\000\026\002\ufffd\025\ufffd" +
    "\035\ufffd\066\ufffd\104\ufffd\106\ufffd\107\ufffd\110\ufffd\123" +
    "\ufffd\142\ufffd\001\002\000\004\022\047\001\002\000\006" +
    "\021\051\142\050\001\002\000\010\005\056\010\055\016" +
    "\057\001\002\000\006\007\uffd0\023\uffd0\001\002\000\004" +
    "\023\053\001\002\000\004\007\054\001\002\000\026\002" +
    "\uffde\025\uffde\035\uffde\066\uffde\104\uffde\106\uffde\107\uffde" +
    "\110\uffde\123\uffde\142\uffde\001\002\000\006\136\075\142" +
    "\076\001\002\000\006\136\073\142\074\001\002\000\014" +
    "\021\063\030\064\136\060\140\062\142\061\001\002\000" +
    "\006\007\uffce\023\uffce\001\002\000\006\007\uffcb\023\uffcb" +
    "\001\002\000\006\140\071\142\070\001\002\000\006\007" +
    "\uffcf\023\uffcf\001\002\000\006\030\066\142\065\001\002" +
    "\000\004\030\067\001\002\000\006\007\uffc8\023\uffc8\001" +
    "\002\000\006\007\uffc7\023\uffc7\001\002\000\004\140\072" +
    "\001\002\000\006\007\uffc6\023\uffc6\001\002\000\006\007" +
    "\uffc5\023\uffc5\001\002\000\006\007\uffcc\023\uffcc\001\002" +
    "\000\006\007\uffc9\023\uffc9\001\002\000\006\007\uffcd\023" +
    "\uffcd\001\002\000\006\007\uffca\023\uffca\001\002\000\004" +
    "\022\100\001\002\000\006\023\102\142\101\001\002\000" +
    "\004\023\106\001\002\000\004\024\103\001\002\000\020" +
    "\066\027\104\017\106\031\107\012\110\013\123\023\142" +
    "\024\001\002\000\022\025\105\066\027\104\017\106\031" +
    "\107\012\110\013\123\023\142\024\001\002\000\026\002" +
    "\uffc4\025\uffc4\035\uffc4\066\uffc4\104\uffc4\106\uffc4\107\uffc4" +
    "\110\uffc4\123\uffc4\142\uffc4\001\002\000\004\024\107\001" +
    "\002\000\020\066\027\104\017\106\031\107\012\110\013" +
    "\123\023\142\024\001\002\000\022\025\111\066\027\104" +
    "\017\106\031\107\012\110\013\123\023\142\024\001\002" +
    "\000\026\002\uffc3\025\uffc3\035\uffc3\066\uffc3\104\uffc3\106" +
    "\uffc3\107\uffc3\110\uffc3\123\uffc3\142\uffc3\001\002\000\016" +
    "\021\116\026\120\030\117\136\113\140\115\142\114\001" +
    "\002\000\004\007\166\001\002\000\014\007\155\011\153" +
    "\012\151\013\152\014\154\001\002\000\004\143\146\001" +
    "\002\000\004\007\145\001\002\000\004\143\142\001\002" +
    "\000\012\021\125\030\126\136\121\140\123\001\002\000" +
    "\014\016\uffd2\023\uffd2\027\uffd2\137\uffd2\141\uffd2\001\002" +
    "\000\004\016\137\001\002\000\006\140\135\143\134\001" +
    "\002\000\004\027\132\001\002\000\014\016\uffd1\023\uffd1" +
    "\027\uffd1\137\uffd1\141\uffd1\001\002\000\006\030\130\143" +
    "\127\001\002\000\004\030\131\001\002\000\014\016\uffd6" +
    "\023\uffd6\027\uffd6\137\uffd6\141\uffd6\001\002\000\014\016" +
    "\uffd5\023\uffd5\027\uffd5\137\uffd5\141\uffd5\001\002\000\004" +
    "\007\133\001\002\000\026\002\uffe4\025\uffe4\035\uffe4\066" +
    "\uffe4\104\uffe4\106\uffe4\107\uffe4\110\uffe4\123\uffe4\142\uffe4" +
    "\001\002\000\004\140\136\001\002\000\014\016\uffd4\023" +
    "\uffd4\027\uffd4\137\uffd4\141\uffd4\001\002\000\014\016\uffd3" +
    "\023\uffd3\027\uffd3\137\uffd3\141\uffd3\001\002\000\012\021" +
    "\125\030\126\136\121\140\123\001\002\000\006\027\uffe2" +
    "\137\141\001\002\000\004\027\uffe3\001\002\000\004\030" +
    "\143\001\002\000\004\007\144\001\002\000\026\002\uffec" +
    "\025\uffec\035\uffec\066\uffec\104\uffec\106\uffec\107\uffec\110" +
    "\uffec\123\uffec\142\uffec\001\002\000\026\002\uffed\025\uffed" +
    "\035\uffed\066\uffed\104\uffed\106\uffed\107\uffed\110\uffed\123" +
    "\uffed\142\uffed\001\002\000\004\140\147\001\002\000\004" +
    "\007\150\001\002\000\026\002\uffea\025\uffea\035\uffea\066" +
    "\uffea\104\uffea\106\uffea\107\uffea\110\uffea\123\uffea\142\uffea" +
    "\001\002\000\004\142\164\001\002\000\004\142\162\001" +
    "\002\000\004\142\160\001\002\000\004\142\156\001\002" +
    "\000\026\002\uffe9\025\uffe9\035\uffe9\066\uffe9\104\uffe9\106" +
    "\uffe9\107\uffe9\110\uffe9\123\uffe9\142\uffe9\001\002\000\004" +
    "\007\157\001\002\000\026\002\uffe5\025\uffe5\035\uffe5\066" +
    "\uffe5\104\uffe5\106\uffe5\107\uffe5\110\uffe5\123\uffe5\142\uffe5" +
    "\001\002\000\004\007\161\001\002\000\026\002\uffe8\025" +
    "\uffe8\035\uffe8\066\uffe8\104\uffe8\106\uffe8\107\uffe8\110\uffe8" +
    "\123\uffe8\142\uffe8\001\002\000\004\007\163\001\002\000" +
    "\026\002\uffe6\025\uffe6\035\uffe6\066\uffe6\104\uffe6\106\uffe6" +
    "\107\uffe6\110\uffe6\123\uffe6\142\uffe6\001\002\000\004\007" +
    "\165\001\002\000\026\002\uffe7\025\uffe7\035\uffe7\066\uffe7" +
    "\104\uffe7\106\uffe7\107\uffe7\110\uffe7\123\uffe7\142\uffe7\001" +
    "\002\000\026\002\uffeb\025\uffeb\035\uffeb\066\uffeb\104\uffeb" +
    "\106\uffeb\107\uffeb\110\uffeb\123\uffeb\142\uffeb\001\002\000" +
    "\004\142\170\001\002\000\004\023\171\001\002\000\004" +
    "\024\172\001\002\000\004\037\174\001\002\000\004\025" +
    "\202\001\002\000\012\021\125\030\126\136\121\140\123" +
    "\001\002\000\004\141\176\001\002\000\020\066\027\104" +
    "\017\106\031\107\012\110\013\123\023\142\024\001\002" +
    "\000\022\035\200\066\027\104\017\106\031\107\012\110" +
    "\013\123\023\142\024\001\002\000\004\007\201\001\002" +
    "\000\004\025\uffd7\001\002\000\026\002\uffd8\025\uffd8\035" +
    "\uffd8\066\uffd8\104\uffd8\106\uffd8\107\uffd8\110\uffd8\123\uffd8" +
    "\142\uffd8\001\002\000\006\021\051\142\050\001\002\000" +
    "\004\023\205\001\002\000\004\024\206\001\002\000\020" +
    "\066\027\104\017\106\031\107\012\110\013\123\023\142" +
    "\024\001\002\000\022\025\210\066\027\104\017\106\031" +
    "\107\012\110\013\123\023\142\024\001\002\000\030\002" +
    "\uffe1\025\uffe1\035\uffe1\066\uffe1\104\uffe1\105\211\106\uffe1" +
    "\107\uffe1\110\uffe1\123\uffe1\142\uffe1\001\002\000\004\024" +
    "\212\001\002\000\020\066\027\104\017\106\031\107\012" +
    "\110\013\123\023\142\024\001\002\000\022\025\214\066" +
    "\027\104\017\106\031\107\012\110\013\123\023\142\024" +
    "\001\002\000\026\002\uffe0\025\uffe0\035\uffe0\066\uffe0\104" +
    "\uffe0\106\uffe0\107\uffe0\110\uffe0\123\uffe0\142\uffe0\001\002" +
    "\000\004\022\241\001\002\000\004\142\220\001\002\000" +
    "\004\023\235\001\002\000\004\017\221\001\002\000\004" +
    "\136\222\001\002\000\004\007\223\001\002\000\006\021" +
    "\051\142\050\001\002\000\004\007\225\001\002\000\006" +
    "\020\226\142\227\001\002\000\004\142\234\001\002\000" +
    "\006\017\232\020\231\001\002\000\004\023\uffdc\001\002" +
    "\000\004\023\uffda\001\002\000\004\136\233\001\002\000" +
    "\004\023\uffdb\001\002\000\004\023\uffd9\001\002\000\004" +
    "\024\236\001\002\000\020\066\027\104\017\106\031\107" +
    "\012\110\013\123\023\142\024\001\002\000\022\025\240" +
    "\066\027\104\017\106\031\107\012\110\013\123\023\142" +
    "\024\001\002\000\026\002\uffdd\025\uffdd\035\uffdd\066\uffdd" +
    "\104\uffdd\106\uffdd\107\uffdd\110\uffdd\123\uffdd\142\uffdd\001" +
    "\002\000\004\142\243\001\002\000\004\023\251\001\002" +
    "\000\004\034\244\001\002\000\004\142\245\001\002\000" +
    "\004\016\246\001\002\000\014\021\125\030\126\136\121" +
    "\140\123\142\250\001\002\000\004\023\uffc0\001\002\000" +
    "\004\023\uffc1\001\002\000\004\024\252\001\002\000\020" +
    "\066\027\104\017\106\031\107\012\110\013\123\023\142" +
    "\024\001\002\000\022\025\254\066\027\104\017\106\031" +
    "\107\012\110\013\123\023\142\024\001\002\000\026\002" +
    "\uffc2\025\uffc2\035\uffc2\066\uffc2\104\uffc2\106\uffc2\107\uffc2" +
    "\110\uffc2\123\uffc2\142\uffc2\001\002\000\006\021\051\142" +
    "\050\001\002\000\004\023\257\001\002\000\004\024\260" +
    "\001\002\000\020\066\027\104\017\106\031\107\012\110" +
    "\013\123\023\142\024\001\002\000\022\025\262\066\027" +
    "\104\017\106\031\107\012\110\013\123\023\142\024\001" +
    "\002\000\026\002\uffdf\025\uffdf\035\uffdf\066\uffdf\104\uffdf" +
    "\106\uffdf\107\uffdf\110\uffdf\123\uffdf\142\uffdf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\017\004\013\005\027\006\010\007\021\010\014\011" +
    "\025\012\020\013\015\014\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\004\034\005\044\006\033\007\041\010\035\011\043\012" +
    "\040\013\037\014\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\032\004\013\005\027\006" +
    "\010\007\021\010\014\011\025\012\020\013\015\014\024" +
    "\001\001\000\024\004\034\005\044\006\033\007\041\010" +
    "\035\011\043\012\040\013\037\014\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\103\004\013\005\027\006\010\007\021\010" +
    "\014\011\025\012\020\013\015\014\024\001\001\000\024" +
    "\004\034\005\044\006\033\007\041\010\035\011\043\012" +
    "\040\013\037\014\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\107\004\013\005\027\006\010\007" +
    "\021\010\014\011\025\012\020\013\015\014\024\001\001" +
    "\000\024\004\034\005\044\006\033\007\041\010\035\011" +
    "\043\012\040\013\037\014\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\121\022\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\172\001\001\000\002\001\001" +
    "\000\004\021\174\001\001\000\002\001\001\000\026\003" +
    "\176\004\013\005\027\006\010\007\021\010\014\011\025" +
    "\012\020\013\015\014\024\001\001\000\024\004\034\005" +
    "\044\006\033\007\041\010\035\011\043\012\040\013\037" +
    "\014\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\206\004\013\005\027\006" +
    "\010\007\021\010\014\011\025\012\020\013\015\014\024" +
    "\001\001\000\024\004\034\005\044\006\033\007\041\010" +
    "\035\011\043\012\040\013\037\014\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\212\004\013\005" +
    "\027\006\010\007\021\010\014\011\025\012\020\013\015" +
    "\014\024\001\001\000\024\004\034\005\044\006\033\007" +
    "\041\010\035\011\043\012\040\013\037\014\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\223\001\001\000\002\001" +
    "\001\000\004\017\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\236\004\013\005\027\006\010\007\021\010" +
    "\014\011\025\012\020\013\015\014\024\001\001\000\024" +
    "\004\034\005\044\006\033\007\041\010\035\011\043\012" +
    "\040\013\037\014\042\001\001\000\002\001\001\000\004" +
    "\023\241\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\246\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\252\004\013\005\027\006\010\007\021\010\014" +
    "\011\025\012\020\013\015\014\024\001\001\000\024\004" +
    "\034\005\044\006\033\007\041\010\035\011\043\012\040" +
    "\013\037\014\042\001\001\000\002\001\001\000\004\015" +
    "\255\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\260\004\013\005\027\006\010\007\021\010\014\011" +
    "\025\012\020\013\015\014\024\001\001\000\024\004\034" +
    "\005\044\006\033\007\041\010\035\011\043\012\040\013" +
    "\037\014\042\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

public void syntax_error(Symbol s){
    this.s = s;
}

public Symbol getS(){
    return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintax$actions {
  private final sintax parser;

  /** Constructor */
  CUP$sintax$actions(sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintax$do_action_part00000000(
    int                        CUP$sintax$act_num,
    java_cup.runtime.lr_parser CUP$sintax$parser,
    java.util.Stack            CUP$sintax$stack,
    int                        CUP$sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintax$result;

      /* select the action based on the action number */
      switch (CUP$sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= MENORQ PREGUNTA_A PHP_I SENTENCIA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintax$stack.elementAt(CUP$sintax$top-1)).value;
		RESULT = start_val;
              CUP$sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintax$parser.done_parsing();
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA FUNCION 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= FUNCION 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA if 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= if 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA if_else 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= if_else 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA while 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= while 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA do_while 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= do_while 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA for 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= for 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA switch 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= switch 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA for_each 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= for_each 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION OP_BOOL P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION COMILLAS TEXTO COMILLAS P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION DECINT P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION APOSTROFE TEXTO APOSTROFE P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION IDENTIFIER_VARIABLE P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION IDENTIFIER_VARIABLE SUMA IDENTIFIER_VARIABLE P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION IDENTIFIER_VARIABLE RESTA IDENTIFIER_VARIABLE P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION IDENTIFIER_VARIABLE MULTIPLICA IDENTIFIER_VARIABLE P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION IDENTIFIER_VARIABLE DIVIDE IDENTIFIER_VARIABLE P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION CORCHETE_A D_ARREGLO CORCHETE_C P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // D_ARREGLO ::= IDS OP_RELACIONAL IDS COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("D_ARREGLO",16, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // D_ARREGLO ::= IDS OP_RELACIONAL IDS 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("D_ARREGLO",16, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // if ::= IF PARENTESIS_A SENTENCIA_BOOL PARENTESIS_C LLAVE_A SENTENCIA LLAVE_C 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("if",4, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // if_else ::= IF PARENTESIS_A SENTENCIA_BOOL PARENTESIS_C LLAVE_A SENTENCIA LLAVE_C ELSE LLAVE_A SENTENCIA LLAVE_C 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("if_else",5, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-10)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // while ::= WHILE PARENTESIS_A SENTENCIA_BOOL PARENTESIS_C LLAVE_A SENTENCIA LLAVE_C 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("while",6, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // do_while ::= DO LLAVE_A SENTENCIA LLAVE_C WHILE PARENTESIS_A SENTENCIA_BOOL PARENTESIS_C P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("do_while",7, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-8)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // for ::= FOR PARENTESIS_A SENTENCIA_FOR PARENTESIS_C LLAVE_A SENTENCIA LLAVE_C 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("for",8, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_FOR ::= IDENTIFIER_VARIABLE OP_ATRIBUCION DECINT P_COMA SENTENCIA_BOOL P_COMA DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",12, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION_FOR ::= IDENTIFIER_VARIABLE OP_ATRIBUCION DECINT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",13, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION_FOR ::= IDENTIFIER_VARIABLE OP_INCREODEC 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",13, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_FOR ::= OP_INCREODEC IDENTIFIER_VARIABLE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",13, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // switch ::= SWITCH PARENTESIS_A IDENTIFIER_VARIABLE PARENTESIS_C LLAVE_A DECLARACION_SWITCH LLAVE_C 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("switch",10, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_SWITCH ::= CASE IDS DOSPUNTOS SENTENCIA BREAK P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SWITCH",14, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IDS ::= COMILLAS COMILLAS 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("IDS",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IDS ::= COMILLAS TEXTO COMILLAS 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("IDS",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IDS ::= APOSTROFE APOSTROFE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("IDS",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IDS ::= APOSTROFE TEXTO APOSTROFE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("IDS",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IDS ::= DECINT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("IDS",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IDS ::= OP_BOOL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("IDS",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_BOOL ::= OP_BOOL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_BOOL ::= IDENTIFIER_VARIABLE OP_RELACIONAL OP_BOOL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_BOOL ::= IDENTIFIER_VARIABLE OP_RELACIONAL DECINT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_BOOL ::= IDENTIFIER_VARIABLE MAYORQ DECINT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_BOOL ::= IDENTIFIER_VARIABLE MENORQ DECINT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_BOOL ::= IDENTIFIER_VARIABLE OP_RELACIONAL IDENTIFIER_VARIABLE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_BOOL ::= IDENTIFIER_VARIABLE MAYORQ IDENTIFIER_VARIABLE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_BOOL ::= IDENTIFIER_VARIABLE MENORQ IDENTIFIER_VARIABLE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_BOOL ::= IDENTIFIER_VARIABLE OP_RELACIONAL COMILLAS COMILLAS 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_BOOL ::= IDENTIFIER_VARIABLE OP_RELACIONAL COMILLAS IDENTIFIER_VARIABLE COMILLAS 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_BOOL ::= IDENTIFIER_VARIABLE OP_RELACIONAL APOSTROFE APOSTROFE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_BOOL ::= IDENTIFIER_VARIABLE OP_RELACIONAL APOSTROFE IDENTIFIER_VARIABLE APOSTROFE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNCION ::= FUNCTION TEXTO PARENTESIS_A PARENTESIS_C LLAVE_A SENTENCIA LLAVE_C 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",3, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNCION ::= FUNCTION TEXTO PARENTESIS_A IDENTIFIER_VARIABLE PARENTESIS_C LLAVE_A SENTENCIA LLAVE_C 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",3, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-7)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // for_each ::= FOR EACH PARENTESIS_A SENTENCIA_FOREACH PARENTESIS_C LLAVE_A SENTENCIA LLAVE_C 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("for_each",9, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-7)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA_FOREACH ::= IDENTIFIER_VARIABLE AS IDENTIFIER_VARIABLE OP_RELACIONAL IDENTIFIER_VARIABLE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOREACH",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_FOREACH ::= IDENTIFIER_VARIABLE AS IDENTIFIER_VARIABLE OP_RELACIONAL IDS 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOREACH",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintax$do_action(
    int                        CUP$sintax$act_num,
    java_cup.runtime.lr_parser CUP$sintax$parser,
    java.util.Stack            CUP$sintax$stack,
    int                        CUP$sintax$top)
    throws java.lang.Exception
    {
              return CUP$sintax$do_action_part00000000(
                               CUP$sintax$act_num,
                               CUP$sintax$parser,
                               CUP$sintax$stack,
                               CUP$sintax$top);
    }
}

}
