
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package lexico;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\006\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\004\006\000\002\004\010\000\002" +
    "\004\006\000\002\004\010\000\002\004\006\000\002\004" +
    "\010\000\002\004\010\000\002\004\010\000\002\004\010" +
    "\000\002\004\010\000\002\004\010\000\002\004\010\000" +
    "\002\004\010\000\002\004\010\000\002\004\010\000\002" +
    "\004\010\000\002\004\010\000\002\004\010\000\002\022" +
    "\006\000\002\022\005\000\002\006\011\000\002\025\006" +
    "\000\002\007\012\000\002\010\011\000\002\011\012\000" +
    "\002\012\011\000\002\016\011\000\002\017\005\000\002" +
    "\017\004\000\002\017\004\000\002\014\011\000\002\020" +
    "\010\000\002\020\010\000\002\021\004\000\002\021\005" +
    "\000\002\021\004\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\015\003\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\006\000\002\015\007\000" +
    "\002\015\006\000\002\015\007\000\002\005\011\000\002" +
    "\005\012\000\002\013\011\000\002\023\007\000\002\023" +
    "\007\000\002\023\005\000\002\024\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\004\005\004\001\002\000\004\006\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\135\010\001\002\000\024\066\017\104\021\105" +
    "\013\106\023\107\014\110\033\111\027\123\020\142\011" +
    "\001\002\000\004\017\246\001\002\000\034\002\uffee\006" +
    "\uffee\025\uffee\035\uffee\066\uffee\104\uffee\105\uffee\106\uffee" +
    "\107\uffee\110\uffee\111\uffee\123\uffee\142\uffee\001\002\000" +
    "\006\024\235\104\234\001\002\000\004\022\226\001\002" +
    "\000\030\002\001\006\115\066\017\104\021\105\013\106" +
    "\023\107\014\110\033\111\027\123\020\142\011\001\002" +
    "\000\034\002\ufffe\006\ufffe\025\ufffe\035\ufffe\066\ufffe\104" +
    "\ufffe\105\ufffe\106\ufffe\107\ufffe\110\ufffe\111\ufffe\123\ufffe" +
    "\142\ufffe\001\002\000\004\143\213\001\002\000\004\022" +
    "\172\001\002\000\004\022\164\001\002\000\034\002\ufff4" +
    "\006\ufff4\025\ufff4\035\ufff4\066\ufff4\104\ufff4\105\ufff4\106" +
    "\ufff4\107\ufff4\110\ufff4\111\ufff4\123\ufff4\142\ufff4\001\002" +
    "\000\004\024\155\001\002\000\034\002\ufffa\006\ufffa\025" +
    "\ufffa\035\ufffa\066\ufffa\104\ufffa\105\ufffa\106\ufffa\107\ufffa" +
    "\110\ufffa\111\ufffa\123\ufffa\142\ufffa\001\002\000\034\002" +
    "\ufff8\006\ufff8\025\ufff8\035\ufff8\066\ufff8\104\ufff8\105\ufff8" +
    "\106\ufff8\107\ufff8\110\ufff8\111\ufff8\123\ufff8\142\ufff8\001" +
    "\002\000\034\002\ufff6\006\ufff6\025\ufff6\035\ufff6\066\ufff6" +
    "\104\ufff6\105\ufff6\106\ufff6\107\ufff6\110\ufff6\111\ufff6\123" +
    "\ufff6\142\ufff6\001\002\000\004\022\121\001\002\000\034" +
    "\002\uffec\006\uffec\025\uffec\035\uffec\066\uffec\104\uffec\105" +
    "\uffec\106\uffec\107\uffec\110\uffec\111\uffec\123\uffec\142\uffec" +
    "\001\002\000\034\002\ufff2\006\ufff2\025\ufff2\035\ufff2\066" +
    "\ufff2\104\ufff2\105\ufff2\106\ufff2\107\ufff2\110\ufff2\111\ufff2" +
    "\123\ufff2\142\ufff2\001\002\000\034\002\ufff0\006\ufff0\025" +
    "\ufff0\035\ufff0\066\ufff0\104\ufff0\105\ufff0\106\ufff0\107\ufff0" +
    "\110\ufff0\111\ufff0\123\ufff0\142\ufff0\001\002\000\004\022" +
    "\035\001\002\000\034\002\ufffc\006\ufffc\025\ufffc\035\ufffc" +
    "\066\ufffc\104\ufffc\105\ufffc\106\ufffc\107\ufffc\110\ufffc\111" +
    "\ufffc\123\ufffc\142\ufffc\001\002\000\004\142\037\001\002" +
    "\000\004\023\100\001\002\000\004\017\040\001\002\000" +
    "\004\136\041\001\002\000\004\007\042\001\002\000\006" +
    "\021\045\142\043\001\002\000\010\005\057\010\056\016" +
    "\060\001\002\000\004\007\046\001\002\000\006\007\uffc1" +
    "\023\uffc1\001\002\000\006\020\050\142\047\001\002\000" +
    "\006\017\054\020\053\001\002\000\004\142\052\001\002" +
    "\000\004\023\uffd0\001\002\000\004\023\uffcd\001\002\000" +
    "\004\023\uffce\001\002\000\004\136\055\001\002\000\004" +
    "\023\uffcf\001\002\000\006\136\076\142\077\001\002\000" +
    "\006\136\074\142\075\001\002\000\014\021\064\030\065" +
    "\136\061\140\063\142\062\001\002\000\006\007\uffbf\023" +
    "\uffbf\001\002\000\006\007\uffbc\023\uffbc\001\002\000\006" +
    "\140\072\142\071\001\002\000\006\007\uffc0\023\uffc0\001" +
    "\002\000\006\030\067\142\066\001\002\000\004\030\070" +
    "\001\002\000\006\007\uffb9\023\uffb9\001\002\000\006\007" +
    "\uffb8\023\uffb8\001\002\000\004\140\073\001\002\000\006" +
    "\007\uffb7\023\uffb7\001\002\000\006\007\uffb6\023\uffb6\001" +
    "\002\000\006\007\uffbd\023\uffbd\001\002\000\006\007\uffba" +
    "\023\uffba\001\002\000\006\007\uffbe\023\uffbe\001\002\000" +
    "\006\007\uffbb\023\uffbb\001\002\000\004\024\101\001\002" +
    "\000\024\066\017\104\021\105\013\106\023\107\014\110" +
    "\033\111\027\123\020\142\011\001\002\000\030\006\115" +
    "\025\111\066\017\104\021\105\013\106\023\107\014\110" +
    "\033\111\027\123\020\142\011\001\002\000\034\002\uffef" +
    "\006\uffef\025\uffef\035\uffef\066\uffef\104\uffef\105\uffef\106" +
    "\uffef\107\uffef\110\uffef\111\uffef\123\uffef\142\uffef\001\002" +
    "\000\034\002\uffff\006\uffff\025\uffff\035\uffff\066\uffff\104" +
    "\uffff\105\uffff\106\uffff\107\uffff\110\uffff\111\uffff\123\uffff" +
    "\142\uffff\001\002\000\034\002\ufff5\006\ufff5\025\ufff5\035" +
    "\ufff5\066\ufff5\104\ufff5\105\ufff5\106\ufff5\107\ufff5\110\ufff5" +
    "\111\ufff5\123\ufff5\142\ufff5\001\002\000\034\002\ufffb\006" +
    "\ufffb\025\ufffb\035\ufffb\066\ufffb\104\ufffb\105\ufffb\106\ufffb" +
    "\107\ufffb\110\ufffb\111\ufffb\123\ufffb\142\ufffb\001\002\000" +
    "\034\002\ufff9\006\ufff9\025\ufff9\035\ufff9\066\ufff9\104\ufff9" +
    "\105\ufff9\106\ufff9\107\ufff9\110\ufff9\111\ufff9\123\ufff9\142" +
    "\ufff9\001\002\000\034\002\ufff7\006\ufff7\025\ufff7\035\ufff7" +
    "\066\ufff7\104\ufff7\105\ufff7\106\ufff7\107\ufff7\110\ufff7\111" +
    "\ufff7\123\ufff7\142\ufff7\001\002\000\034\002\uffd1\006\uffd1" +
    "\025\uffd1\035\uffd1\066\uffd1\104\uffd1\105\uffd1\106\uffd1\107" +
    "\uffd1\110\uffd1\111\uffd1\123\uffd1\142\uffd1\001\002\000\034" +
    "\002\uffed\006\uffed\025\uffed\035\uffed\066\uffed\104\uffed\105" +
    "\uffed\106\uffed\107\uffed\110\uffed\111\uffed\123\uffed\142\uffed" +
    "\001\002\000\034\002\ufff3\006\ufff3\025\ufff3\035\ufff3\066" +
    "\ufff3\104\ufff3\105\ufff3\106\ufff3\107\ufff3\110\ufff3\111\ufff3" +
    "\123\ufff3\142\ufff3\001\002\000\034\002\ufff1\006\ufff1\025" +
    "\ufff1\035\ufff1\066\ufff1\104\ufff1\105\ufff1\106\ufff1\107\ufff1" +
    "\110\ufff1\111\ufff1\123\ufff1\142\ufff1\001\002\000\004\010" +
    "\120\001\002\000\034\002\uffeb\006\uffeb\025\uffeb\035\uffeb" +
    "\066\uffeb\104\uffeb\105\uffeb\106\uffeb\107\uffeb\110\uffeb\111" +
    "\uffeb\123\uffeb\142\uffeb\001\002\000\034\002\ufffd\006\ufffd" +
    "\025\ufffd\035\ufffd\066\ufffd\104\ufffd\105\ufffd\106\ufffd\107" +
    "\ufffd\110\ufffd\111\ufffd\123\ufffd\142\ufffd\001\002\000\034" +
    "\002\uffaf\006\uffaf\025\uffaf\035\uffaf\066\uffaf\104\uffaf\105" +
    "\uffaf\106\uffaf\107\uffaf\110\uffaf\111\uffaf\123\uffaf\142\uffaf" +
    "\001\002\000\004\142\123\001\002\000\004\023\151\001" +
    "\002\000\004\034\124\001\002\000\004\142\125\001\002" +
    "\000\006\016\126\023\uffb0\001\002\000\010\030\132\140" +
    "\131\142\130\001\002\000\004\023\uffb1\001\002\000\004" +
    "\023\uffb2\001\002\000\012\021\145\136\143\140\144\143" +
    "\142\001\002\000\012\021\135\030\136\136\134\143\133" +
    "\001\002\000\004\030\141\001\002\000\004\030\140\001" +
    "\002\000\004\030\137\001\002\000\014\016\uffc9\023\uffc9" +
    "\027\uffc9\137\uffc9\141\uffc9\001\002\000\014\016\uffc4\023" +
    "\uffc4\027\uffc4\137\uffc4\141\uffc4\001\002\000\014\016\uffc5" +
    "\023\uffc5\027\uffc5\137\uffc5\141\uffc5\001\002\000\014\016" +
    "\uffc8\023\uffc8\027\uffc8\137\uffc8\141\uffc8\001\002\000\004" +
    "\140\150\001\002\000\004\140\147\001\002\000\014\016" +
    "\uffc7\023\uffc7\027\uffc7\137\uffc7\141\uffc7\001\002\000\004" +
    "\140\146\001\002\000\014\016\uffc2\023\uffc2\027\uffc2\137" +
    "\uffc2\141\uffc2\001\002\000\014\016\uffc3\023\uffc3\027\uffc3" +
    "\137\uffc3\141\uffc3\001\002\000\014\016\uffc6\023\uffc6\027" +
    "\uffc6\137\uffc6\141\uffc6\001\002\000\004\024\152\001\002" +
    "\000\024\066\017\104\021\105\013\106\023\107\014\110" +
    "\033\111\027\123\020\142\011\001\002\000\030\006\115" +
    "\025\154\066\017\104\021\105\013\106\023\107\014\110" +
    "\033\111\027\123\020\142\011\001\002\000\034\002\uffb3" +
    "\006\uffb3\025\uffb3\035\uffb3\066\uffb3\104\uffb3\105\uffb3\106" +
    "\uffb3\107\uffb3\110\uffb3\111\uffb3\123\uffb3\142\uffb3\001\002" +
    "\000\024\066\017\104\021\105\013\106\023\107\014\110" +
    "\033\111\027\123\020\142\011\001\002\000\030\006\115" +
    "\025\157\066\017\104\021\105\013\106\023\107\014\110" +
    "\033\111\027\123\020\142\011\001\002\000\004\107\160" +
    "\001\002\000\004\022\161\001\002\000\006\021\045\142" +
    "\043\001\002\000\004\023\163\001\002\000\034\002\uffd2" +
    "\006\uffd2\025\uffd2\035\uffd2\066\uffd2\104\uffd2\105\uffd2\106" +
    "\uffd2\107\uffd2\110\uffd2\111\uffd2\123\uffd2\142\uffd2\001\002" +
    "\000\006\021\045\142\043\001\002\000\004\023\166\001" +
    "\002\000\004\024\167\001\002\000\024\066\017\104\021" +
    "\105\013\106\023\107\014\110\033\111\027\123\020\142" +
    "\011\001\002\000\030\006\115\025\171\066\017\104\021" +
    "\105\013\106\023\107\014\110\033\111\027\123\020\142" +
    "\011\001\002\000\034\002\uffd6\006\uffd6\025\uffd6\035\uffd6" +
    "\066\uffd6\104\uffd6\105\uffd6\106\uffd6\107\uffd6\110\uffd6\111" +
    "\uffd6\123\uffd6\142\uffd6\001\002\000\004\142\173\001\002" +
    "\000\004\023\174\001\002\000\004\024\175\001\002\000" +
    "\004\037\177\001\002\000\004\025\212\001\002\000\010" +
    "\030\132\136\200\140\131\001\002\000\004\141\206\001" +
    "\002\000\004\141\202\001\002\000\024\066\017\104\021" +
    "\105\013\106\023\107\014\110\033\111\027\123\020\142" +
    "\011\001\002\000\030\006\115\035\204\066\017\104\021" +
    "\105\013\106\023\107\014\110\033\111\027\123\020\142" +
    "\011\001\002\000\004\007\205\001\002\000\004\025\uffcb" +
    "\001\002\000\024\066\017\104\021\105\013\106\023\107" +
    "\014\110\033\111\027\123\020\142\011\001\002\000\030" +
    "\006\115\035\210\066\017\104\021\105\013\106\023\107" +
    "\014\110\033\111\027\123\020\142\011\001\002\000\004" +
    "\007\211\001\002\000\004\025\uffca\001\002\000\034\002" +
    "\uffcc\006\uffcc\025\uffcc\035\uffcc\066\uffcc\104\uffcc\105\uffcc" +
    "\106\uffcc\107\uffcc\110\uffcc\111\uffcc\123\uffcc\142\uffcc\001" +
    "\002\000\004\022\214\001\002\000\006\023\216\142\215" +
    "\001\002\000\004\023\222\001\002\000\004\024\217\001" +
    "\002\000\024\066\017\104\021\105\013\106\023\107\014" +
    "\110\033\111\027\123\020\142\011\001\002\000\030\006" +
    "\115\025\221\066\017\104\021\105\013\106\023\107\014" +
    "\110\033\111\027\123\020\142\011\001\002\000\034\002" +
    "\uffb5\006\uffb5\025\uffb5\035\uffb5\066\uffb5\104\uffb5\105\uffb5" +
    "\106\uffb5\107\uffb5\110\uffb5\111\uffb5\123\uffb5\142\uffb5\001" +
    "\002\000\004\024\223\001\002\000\024\066\017\104\021" +
    "\105\013\106\023\107\014\110\033\111\027\123\020\142" +
    "\011\001\002\000\030\006\115\025\225\066\017\104\021" +
    "\105\013\106\023\107\014\110\033\111\027\123\020\142" +
    "\011\001\002\000\034\002\uffb4\006\uffb4\025\uffb4\035\uffb4" +
    "\066\uffb4\104\uffb4\105\uffb4\106\uffb4\107\uffb4\110\uffb4\111" +
    "\uffb4\123\uffb4\142\uffb4\001\002\000\006\021\045\142\043" +
    "\001\002\000\004\023\230\001\002\000\004\024\231\001" +
    "\002\000\024\066\017\104\021\105\013\106\023\107\014" +
    "\110\033\111\027\123\020\142\011\001\002\000\030\006" +
    "\115\025\233\066\017\104\021\105\013\106\023\107\014" +
    "\110\033\111\027\123\020\142\011\001\002\000\034\002" +
    "\uffd3\006\uffd3\025\uffd3\035\uffd3\066\uffd3\104\uffd3\105\uffd3" +
    "\106\uffd3\107\uffd3\110\uffd3\111\uffd3\123\uffd3\142\uffd3\001" +
    "\002\000\004\022\240\001\002\000\024\066\017\104\021" +
    "\105\013\106\023\107\014\110\033\111\027\123\020\142" +
    "\011\001\002\000\030\006\115\025\237\066\017\104\021" +
    "\105\013\106\023\107\014\110\033\111\027\123\020\142" +
    "\011\001\002\000\034\002\uffd5\006\uffd5\025\uffd5\035\uffd5" +
    "\066\uffd5\104\uffd5\105\uffd5\106\uffd5\107\uffd5\110\uffd5\111" +
    "\uffd5\123\uffd5\142\uffd5\001\002\000\006\021\045\142\043" +
    "\001\002\000\004\023\242\001\002\000\004\024\243\001" +
    "\002\000\024\066\017\104\021\105\013\106\023\107\014" +
    "\110\033\111\027\123\020\142\011\001\002\000\030\006" +
    "\115\025\245\066\017\104\021\105\013\106\023\107\014" +
    "\110\033\111\027\123\020\142\011\001\002\000\034\002" +
    "\uffd4\006\uffd4\025\uffd4\035\uffd4\066\uffd4\104\uffd4\105\uffd4" +
    "\106\uffd4\107\uffd4\110\uffd4\111\uffd4\123\uffd4\142\uffd4\001" +
    "\002\000\016\021\252\026\254\030\253\136\247\140\251" +
    "\142\250\001\002\000\014\007\324\011\322\012\320\013" +
    "\321\014\323\001\002\000\014\007\277\011\275\012\273" +
    "\013\274\014\276\001\002\000\004\143\270\001\002\000" +
    "\004\007\267\001\002\000\004\143\264\001\002\000\006" +
    "\030\132\140\131\001\002\000\004\016\261\001\002\000" +
    "\004\027\257\001\002\000\004\007\260\001\002\000\034" +
    "\002\uffd9\006\uffd9\025\uffd9\035\uffd9\066\uffd9\104\uffd9\105" +
    "\uffd9\106\uffd9\107\uffd9\110\uffd9\111\uffd9\123\uffd9\142\uffd9" +
    "\001\002\000\006\030\132\140\131\001\002\000\006\027" +
    "\uffd7\137\263\001\002\000\004\027\uffd8\001\002\000\004" +
    "\030\265\001\002\000\004\007\266\001\002\000\034\002" +
    "\uffe9\006\uffe9\025\uffe9\035\uffe9\066\uffe9\104\uffe9\105\uffe9" +
    "\106\uffe9\107\uffe9\110\uffe9\111\uffe9\123\uffe9\142\uffe9\001" +
    "\002\000\034\002\uffea\006\uffea\025\uffea\035\uffea\066\uffea" +
    "\104\uffea\105\uffea\106\uffea\107\uffea\110\uffea\111\uffea\123" +
    "\uffea\142\uffea\001\002\000\004\140\271\001\002\000\004" +
    "\007\272\001\002\000\034\002\uffe7\006\uffe7\025\uffe7\035" +
    "\uffe7\066\uffe7\104\uffe7\105\uffe7\106\uffe7\107\uffe7\110\uffe7" +
    "\111\uffe7\123\uffe7\142\uffe7\001\002\000\006\136\314\142" +
    "\315\001\002\000\006\136\310\142\311\001\002\000\006" +
    "\136\304\142\305\001\002\000\006\136\300\142\301\001" +
    "\002\000\034\002\uffe6\006\uffe6\025\uffe6\035\uffe6\066\uffe6" +
    "\104\uffe6\105\uffe6\106\uffe6\107\uffe6\110\uffe6\111\uffe6\123" +
    "\uffe6\142\uffe6\001\002\000\004\007\303\001\002\000\004" +
    "\007\302\001\002\000\034\002\uffe2\006\uffe2\025\uffe2\035" +
    "\uffe2\066\uffe2\104\uffe2\105\uffe2\106\uffe2\107\uffe2\110\uffe2" +
    "\111\uffe2\123\uffe2\142\uffe2\001\002\000\034\002\uffde\006" +
    "\uffde\025\uffde\035\uffde\066\uffde\104\uffde\105\uffde\106\uffde" +
    "\107\uffde\110\uffde\111\uffde\123\uffde\142\uffde\001\002\000" +
    "\004\007\307\001\002\000\004\007\306\001\002\000\034" +
    "\002\uffe5\006\uffe5\025\uffe5\035\uffe5\066\uffe5\104\uffe5\105" +
    "\uffe5\106\uffe5\107\uffe5\110\uffe5\111\uffe5\123\uffe5\142\uffe5" +
    "\001\002\000\034\002\uffe1\006\uffe1\025\uffe1\035\uffe1\066" +
    "\uffe1\104\uffe1\105\uffe1\106\uffe1\107\uffe1\110\uffe1\111\uffe1" +
    "\123\uffe1\142\uffe1\001\002\000\004\007\313\001\002\000" +
    "\004\007\312\001\002\000\034\002\uffe3\006\uffe3\025\uffe3" +
    "\035\uffe3\066\uffe3\104\uffe3\105\uffe3\106\uffe3\107\uffe3\110" +
    "\uffe3\111\uffe3\123\uffe3\142\uffe3\001\002\000\034\002\uffdf" +
    "\006\uffdf\025\uffdf\035\uffdf\066\uffdf\104\uffdf\105\uffdf\106" +
    "\uffdf\107\uffdf\110\uffdf\111\uffdf\123\uffdf\142\uffdf\001\002" +
    "\000\004\007\317\001\002\000\004\007\316\001\002\000" +
    "\034\002\uffe4\006\uffe4\025\uffe4\035\uffe4\066\uffe4\104\uffe4" +
    "\105\uffe4\106\uffe4\107\uffe4\110\uffe4\111\uffe4\123\uffe4\142" +
    "\uffe4\001\002\000\034\002\uffe0\006\uffe0\025\uffe0\035\uffe0" +
    "\066\uffe0\104\uffe0\105\uffe0\106\uffe0\107\uffe0\110\uffe0\111" +
    "\uffe0\123\uffe0\142\uffe0\001\002\000\004\142\333\001\002" +
    "\000\004\142\331\001\002\000\004\142\327\001\002\000" +
    "\004\142\325\001\002\000\034\002\uffe8\006\uffe8\025\uffe8" +
    "\035\uffe8\066\uffe8\104\uffe8\105\uffe8\106\uffe8\107\uffe8\110" +
    "\uffe8\111\uffe8\123\uffe8\142\uffe8\001\002\000\004\007\326" +
    "\001\002\000\034\002\uffda\006\uffda\025\uffda\035\uffda\066" +
    "\uffda\104\uffda\105\uffda\106\uffda\107\uffda\110\uffda\111\uffda" +
    "\123\uffda\142\uffda\001\002\000\004\007\330\001\002\000" +
    "\034\002\uffdd\006\uffdd\025\uffdd\035\uffdd\066\uffdd\104\uffdd" +
    "\105\uffdd\106\uffdd\107\uffdd\110\uffdd\111\uffdd\123\uffdd\142" +
    "\uffdd\001\002\000\004\007\332\001\002\000\034\002\uffdb" +
    "\006\uffdb\025\uffdb\035\uffdb\066\uffdb\104\uffdb\105\uffdb\106" +
    "\uffdb\107\uffdb\110\uffdb\111\uffdb\123\uffdb\142\uffdb\001\002" +
    "\000\004\007\334\001\002\000\034\002\uffdc\006\uffdc\025" +
    "\uffdc\035\uffdc\066\uffdc\104\uffdc\105\uffdc\106\uffdc\107\uffdc" +
    "\110\uffdc\111\uffdc\123\uffdc\142\uffdc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\014\004\015\005\033\006\023\007\024\010\025\011" +
    "\021\012\030\013\011\014\031\025\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\103\005\116\006\105\007\106\010\107" +
    "\011\104\012\112\013\102\014\113\024\115\025\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\101\004\015\005\033\006\023" +
    "\007\024\010\025\011\021\012\030\013\011\014\031\025" +
    "\027\001\001\000\030\004\103\005\116\006\105\007\106" +
    "\010\107\011\104\012\112\013\102\014\113\024\115\025" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\152\004\015" +
    "\005\033\006\023\007\024\010\025\011\021\012\030\013" +
    "\011\014\031\025\027\001\001\000\030\004\103\005\116" +
    "\006\105\007\106\010\107\011\104\012\112\013\102\014" +
    "\113\024\115\025\111\001\001\000\002\001\001\000\030" +
    "\003\155\004\015\005\033\006\023\007\024\010\025\011" +
    "\021\012\030\013\011\014\031\025\027\001\001\000\030" +
    "\004\103\005\116\006\105\007\106\010\107\011\104\012" +
    "\112\013\102\014\113\024\115\025\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\167\004" +
    "\015\005\033\006\023\007\024\010\025\011\021\012\030" +
    "\013\011\014\031\025\027\001\001\000\030\004\103\005" +
    "\116\006\105\007\106\010\107\011\104\012\112\013\102" +
    "\014\113\024\115\025\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\175\001\001\000\002\001\001\000\004\021\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\202" +
    "\004\015\005\033\006\023\007\024\010\025\011\021\012" +
    "\030\013\011\014\031\025\027\001\001\000\030\004\103" +
    "\005\116\006\105\007\106\010\107\011\104\012\112\013" +
    "\102\014\113\024\115\025\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\206\004\015\005\033\006" +
    "\023\007\024\010\025\011\021\012\030\013\011\014\031" +
    "\025\027\001\001\000\030\004\103\005\116\006\105\007" +
    "\106\010\107\011\104\012\112\013\102\014\113\024\115" +
    "\025\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\217\004\015\005" +
    "\033\006\023\007\024\010\025\011\021\012\030\013\011" +
    "\014\031\025\027\001\001\000\030\004\103\005\116\006" +
    "\105\007\106\010\107\011\104\012\112\013\102\014\113" +
    "\024\115\025\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\223\004\015\005\033\006\023\007\024" +
    "\010\025\011\021\012\030\013\011\014\031\025\027\001" +
    "\001\000\030\004\103\005\116\006\105\007\106\010\107" +
    "\011\104\012\112\013\102\014\113\024\115\025\111\001" +
    "\001\000\002\001\001\000\004\015\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\231\004\015\005" +
    "\033\006\023\007\024\010\025\011\021\012\030\013\011" +
    "\014\031\025\027\001\001\000\030\004\103\005\116\006" +
    "\105\007\106\010\107\011\104\012\112\013\102\014\113" +
    "\024\115\025\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\235\004\015\005\033\006\023\007\024" +
    "\010\025\011\021\012\030\013\011\014\031\025\027\001" +
    "\001\000\030\004\103\005\116\006\105\007\106\010\107" +
    "\011\104\012\112\013\102\014\113\024\115\025\111\001" +
    "\001\000\002\001\001\000\004\015\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\243\004\015\005" +
    "\033\006\023\007\024\010\025\011\021\012\030\013\011" +
    "\014\031\025\027\001\001\000\030\004\103\005\116\006" +
    "\105\007\106\010\107\011\104\012\112\013\102\014\113" +
    "\024\115\025\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\254\022" +
    "\255\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\261\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;

public void syntax_error(Symbol s){
    this.s = s;
}

public Symbol getS(){
    return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintax$actions {
  private final sintax parser;

  /** Constructor */
  CUP$sintax$actions(sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintax$do_action_part00000000(
    int                        CUP$sintax$act_num,
    java_cup.runtime.lr_parser CUP$sintax$parser,
    java.util.Stack            CUP$sintax$stack,
    int                        CUP$sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintax$result;

      /* select the action based on the action number */
      switch (CUP$sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= MENORQ PREGUNTA_A PHP_I SENTENCIA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintax$stack.elementAt(CUP$sintax$top-1)).value;
		RESULT = start_val;
              CUP$sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintax$parser.done_parsing();
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA FUNCION 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= FUNCION 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA if 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= if 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA if_else 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= if_else 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA while 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= while 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA do_while 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= do_while 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA for 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= for 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA switch 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= switch 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA for_each 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= for_each 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA else 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= else 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA FIN 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION OP_BOOL P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION COMILLAS TEXTO COMILLAS P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION DECINT P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION APOSTROFE TEXTO APOSTROFE P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION IDENTIFIER_VARIABLE P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION IDENTIFIER_VARIABLE SUMA IDENTIFIER_VARIABLE P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION IDENTIFIER_VARIABLE RESTA IDENTIFIER_VARIABLE P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION IDENTIFIER_VARIABLE MULTIPLICA IDENTIFIER_VARIABLE P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION IDENTIFIER_VARIABLE DIVIDE IDENTIFIER_VARIABLE P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION IDENTIFIER_VARIABLE SUMA DECINT P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION IDENTIFIER_VARIABLE RESTA DECINT P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION IDENTIFIER_VARIABLE MULTIPLICA DECINT P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION IDENTIFIER_VARIABLE DIVIDE DECINT P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION DECINT SUMA IDENTIFIER_VARIABLE P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION DECINT RESTA IDENTIFIER_VARIABLE P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION DECINT MULTIPLICA IDENTIFIER_VARIABLE P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION DECINT DIVIDE IDENTIFIER_VARIABLE P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= IDENTIFIER_VARIABLE OP_ATRIBUCION CORCHETE_A D_ARREGLO CORCHETE_C P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // D_ARREGLO ::= IDS OP_RELACIONAL IDS COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("D_ARREGLO",16, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // D_ARREGLO ::= IDS OP_RELACIONAL IDS 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("D_ARREGLO",16, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // if ::= IF PARENTESIS_A SENTENCIA_BOOL PARENTESIS_C LLAVE_A SENTENCIA LLAVE_C 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("if",4, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // else ::= ELSE LLAVE_A SENTENCIA LLAVE_C 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("else",19, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // if_else ::= ELSE IF PARENTESIS_A SENTENCIA_BOOL PARENTESIS_C LLAVE_A SENTENCIA LLAVE_C 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("if_else",5, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-7)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // while ::= WHILE PARENTESIS_A SENTENCIA_BOOL PARENTESIS_C LLAVE_A SENTENCIA LLAVE_C 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("while",6, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // do_while ::= DO LLAVE_A SENTENCIA LLAVE_C WHILE PARENTESIS_A SENTENCIA_BOOL PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("do_while",7, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-7)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // for ::= FOR PARENTESIS_A SENTENCIA_FOR PARENTESIS_C LLAVE_A SENTENCIA LLAVE_C 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("for",8, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_FOR ::= IDENTIFIER_VARIABLE OP_ATRIBUCION DECINT P_COMA SENTENCIA_BOOL P_COMA DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",12, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_FOR ::= IDENTIFIER_VARIABLE OP_ATRIBUCION DECINT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",13, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_FOR ::= IDENTIFIER_VARIABLE OP_INCREODEC 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",13, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_FOR ::= OP_INCREODEC IDENTIFIER_VARIABLE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",13, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // switch ::= SWITCH PARENTESIS_A IDENTIFIER_VARIABLE PARENTESIS_C LLAVE_A DECLARACION_SWITCH LLAVE_C 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("switch",10, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_SWITCH ::= CASE IDS DOSPUNTOS SENTENCIA BREAK P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SWITCH",14, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_SWITCH ::= CASE DECINT DOSPUNTOS SENTENCIA BREAK P_COMA 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_SWITCH",14, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-5)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IDS ::= COMILLAS COMILLAS 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("IDS",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IDS ::= COMILLAS TEXTO COMILLAS 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("IDS",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IDS ::= APOSTROFE APOSTROFE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("IDS",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IDS ::= APOSTROFE TEXTO APOSTROFE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("IDS",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IDS ::= COMILLAS DECINT COMILLAS 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("IDS",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IDS ::= COMILLAS OP_BOOL COMILLAS 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("IDS",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IDS ::= APOSTROFE DECINT APOSTROFE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("IDS",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IDS ::= APOSTROFE OP_BOOL APOSTROFE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("IDS",15, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA_BOOL ::= OP_BOOL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_BOOL ::= IDENTIFIER_VARIABLE OP_RELACIONAL OP_BOOL 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_BOOL ::= IDENTIFIER_VARIABLE OP_RELACIONAL DECINT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_BOOL ::= IDENTIFIER_VARIABLE MAYORQ DECINT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_BOOL ::= IDENTIFIER_VARIABLE MENORQ DECINT 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_BOOL ::= IDENTIFIER_VARIABLE OP_RELACIONAL IDENTIFIER_VARIABLE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_BOOL ::= IDENTIFIER_VARIABLE MAYORQ IDENTIFIER_VARIABLE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_BOOL ::= IDENTIFIER_VARIABLE MENORQ IDENTIFIER_VARIABLE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_BOOL ::= IDENTIFIER_VARIABLE OP_RELACIONAL COMILLAS COMILLAS 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_BOOL ::= IDENTIFIER_VARIABLE OP_RELACIONAL COMILLAS IDENTIFIER_VARIABLE COMILLAS 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA_BOOL ::= IDENTIFIER_VARIABLE OP_RELACIONAL APOSTROFE APOSTROFE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-3)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_BOOL ::= IDENTIFIER_VARIABLE OP_RELACIONAL APOSTROFE IDENTIFIER_VARIABLE APOSTROFE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOL",11, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FUNCION ::= FUNCTION TEXTO PARENTESIS_A PARENTESIS_C LLAVE_A SENTENCIA LLAVE_C 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",3, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FUNCION ::= FUNCTION TEXTO PARENTESIS_A IDENTIFIER_VARIABLE PARENTESIS_C LLAVE_A SENTENCIA LLAVE_C 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",3, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-7)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // for_each ::= FEACH PARENTESIS_A SENTENCIA_FOREACH PARENTESIS_C LLAVE_A SENTENCIA LLAVE_C 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("for_each",9, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-6)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA_FOREACH ::= IDENTIFIER_VARIABLE AS IDENTIFIER_VARIABLE OP_RELACIONAL IDENTIFIER_VARIABLE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOREACH",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA_FOREACH ::= IDENTIFIER_VARIABLE AS IDENTIFIER_VARIABLE OP_RELACIONAL IDS 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOREACH",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-4)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA_FOREACH ::= IDENTIFIER_VARIABLE AS IDENTIFIER_VARIABLE 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOREACH",17, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-2)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FIN ::= PREGUNTA_A MAYORQ 
            {
              Object RESULT =null;

              CUP$sintax$result = parser.getSymbolFactory().newSymbol("FIN",18, ((java_cup.runtime.Symbol)CUP$sintax$stack.elementAt(CUP$sintax$top-1)), ((java_cup.runtime.Symbol)CUP$sintax$stack.peek()), RESULT);
            }
          return CUP$sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintax$do_action(
    int                        CUP$sintax$act_num,
    java_cup.runtime.lr_parser CUP$sintax$parser,
    java.util.Stack            CUP$sintax$stack,
    int                        CUP$sintax$top)
    throws java.lang.Exception
    {
              return CUP$sintax$do_action_part00000000(
                               CUP$sintax$act_num,
                               CUP$sintax$parser,
                               CUP$sintax$stack,
                               CUP$sintax$top);
    }
}

}
