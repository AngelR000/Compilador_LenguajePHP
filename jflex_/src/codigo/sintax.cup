package lexico;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;

public void syntax_error(Symbol s){
    this.s = s;
}

public Symbol getS(){
    return this.s;
}
:};

terminal HALT_COMPILER, MENORQ, PREGUNTA_A, P_COMA, MAYORQ, SUMA, RESTA, MULTIPLICA, DIVIDE,
OP_LOGICO, OP_RELACIONAL, OP_ATRIBUCION, OP_INCREODEC, OP_BOOL, PARENTESIS_A, PARENTESIS_C, LLAVE_A, LLAVE_C, CORCHETE_A,
CORCHETE_C, COMILLAS, ABSTRACT, AND, ARRAY, AS, BREAK, CALLABLE, CASE, CATCH, CLASS, CLONE, CONST,
CONTINUE, DECLARE, DEFAULT, DIE, ECHO, EMPTY, ELSEIF, ENDDECLARE, ENDFOR, ENDFOREACH, ENDIF, ENDSWITCH, ENDWHILE, EVAL, EXIT, EXTENDS,
FINAL, FINALLY, FUNCTION, GLOBAL, GOTO, IMPLEMENTS, INCLUDE, INCLUDE_ONCE, INSTANCEOF, INSTEADOF, INTERFACE, ISSET, LIST, MATCH,
NAMESPACE, NEW, IF, ELSE, DO, WHILE, FOR, EACH, OR, PRINT, PRIVATE, PROTECTED, PUBLIC, REQUIRE, REQUIRE_ONCE, RETURN,
STATIC, SWITCH, THROW, TRAIT, TRY, UNSET, USE, VAR, XOR, YIELD, FROM, PHP_I, DECINT, COMA, APOSTROFE, DOSPUNTOS, IDENTIFIER_VARIABLE, TEXTO;

non terminal INICIO, SENTENCIA, DECLARACION, FUNCION, if, if_else, while, do_while, for, for_each, switch, SENTENCIA_BOOL, 
SENTENCIA_FOR, DECLARACION_FOR, DECLARACION_SWITCH, IDS, D_ARREGLO, SENTENCIA_FOREACH;


INICIO ::= MENORQ PREGUNTA_A PHP_I SENTENCIA
;
SENTENCIA ::= 
            SENTENCIA DECLARACION|
            DECLARACION |
            SENTENCIA FUNCION |
            FUNCION|
            SENTENCIA if |
            if |
            SENTENCIA if_else |
            if_else |
            SENTENCIA while |
            while |
            SENTENCIA do_while |
            do_while |
            SENTENCIA for |
            for |
            SENTENCIA switch |
            switch |
            SENTENCIA for_each |
            for_each 
;

DECLARACION ::= 
               IDENTIFIER_VARIABLE OP_ATRIBUCION OP_BOOL P_COMA |
               IDENTIFIER_VARIABLE OP_ATRIBUCION COMILLAS TEXTO COMILLAS P_COMA |
               IDENTIFIER_VARIABLE OP_ATRIBUCION DECINT P_COMA |
               IDENTIFIER_VARIABLE OP_ATRIBUCION APOSTROFE TEXTO APOSTROFE P_COMA |
               IDENTIFIER_VARIABLE OP_ATRIBUCION IDENTIFIER_VARIABLE P_COMA |
               IDENTIFIER_VARIABLE OP_ATRIBUCION IDENTIFIER_VARIABLE SUMA IDENTIFIER_VARIABLE P_COMA |
               IDENTIFIER_VARIABLE OP_ATRIBUCION IDENTIFIER_VARIABLE RESTA IDENTIFIER_VARIABLE P_COMA |
               IDENTIFIER_VARIABLE OP_ATRIBUCION IDENTIFIER_VARIABLE MULTIPLICA IDENTIFIER_VARIABLE P_COMA |
               IDENTIFIER_VARIABLE OP_ATRIBUCION IDENTIFIER_VARIABLE DIVIDE IDENTIFIER_VARIABLE P_COMA |
               IDENTIFIER_VARIABLE OP_ATRIBUCION CORCHETE_A D_ARREGLO CORCHETE_C P_COMA
;
D_ARREGLO ::= 
    IDS OP_RELACIONAL IDS COMA |
    IDS OP_RELACIONAL IDS 
;
if ::= IF PARENTESIS_A SENTENCIA_BOOL PARENTESIS_C LLAVE_A SENTENCIA LLAVE_C
;
if_else ::= IF PARENTESIS_A SENTENCIA_BOOL PARENTESIS_C LLAVE_A SENTENCIA LLAVE_C ELSE LLAVE_A SENTENCIA LLAVE_C
;
while ::= WHILE PARENTESIS_A SENTENCIA_BOOL PARENTESIS_C LLAVE_A SENTENCIA LLAVE_C
;
do_while ::= DO LLAVE_A SENTENCIA LLAVE_C WHILE PARENTESIS_A SENTENCIA_BOOL PARENTESIS_C P_COMA
;
for ::= FOR PARENTESIS_A SENTENCIA_FOR PARENTESIS_C LLAVE_A SENTENCIA LLAVE_C
;
SENTENCIA_FOR ::=
    IDENTIFIER_VARIABLE OP_ATRIBUCION DECINT P_COMA SENTENCIA_BOOL P_COMA DECLARACION_FOR 
;
DECLARACION_FOR ::= 
    IDENTIFIER_VARIABLE OP_ATRIBUCION DECINT |
    IDENTIFIER_VARIABLE OP_INCREODEC | 
    OP_INCREODEC IDENTIFIER_VARIABLE
;
switch ::= 
    SWITCH PARENTESIS_A IDENTIFIER_VARIABLE PARENTESIS_C LLAVE_A DECLARACION_SWITCH LLAVE_C
;
DECLARACION_SWITCH ::= 
    CASE IDS DOSPUNTOS SENTENCIA BREAK P_COMA
;
IDS ::= 
    COMILLAS COMILLAS |
    COMILLAS TEXTO COMILLAS |
    APOSTROFE APOSTROFE |
    APOSTROFE TEXTO APOSTROFE|
    DECINT |
    OP_BOOL
;
SENTENCIA_BOOL ::= 
    OP_BOOL | 
    IDENTIFIER_VARIABLE OP_RELACIONAL OP_BOOL |
    IDENTIFIER_VARIABLE OP_RELACIONAL DECINT |
    IDENTIFIER_VARIABLE MAYORQ DECINT |
    IDENTIFIER_VARIABLE MENORQ DECINT |
    IDENTIFIER_VARIABLE OP_RELACIONAL IDENTIFIER_VARIABLE |
    IDENTIFIER_VARIABLE MAYORQ IDENTIFIER_VARIABLE |
    IDENTIFIER_VARIABLE MENORQ IDENTIFIER_VARIABLE |
    IDENTIFIER_VARIABLE OP_RELACIONAL COMILLAS COMILLAS |
    IDENTIFIER_VARIABLE OP_RELACIONAL COMILLAS IDENTIFIER_VARIABLE COMILLAS |
    IDENTIFIER_VARIABLE OP_RELACIONAL APOSTROFE APOSTROFE |
    IDENTIFIER_VARIABLE OP_RELACIONAL APOSTROFE IDENTIFIER_VARIABLE APOSTROFE
;
FUNCION ::= 
    FUNCTION TEXTO PARENTESIS_A PARENTESIS_C LLAVE_A SENTENCIA LLAVE_C |
    FUNCTION TEXTO PARENTESIS_A IDENTIFIER_VARIABLE PARENTESIS_C LLAVE_A SENTENCIA LLAVE_C 
;
for_each ::= 
    FOR EACH PARENTESIS_A SENTENCIA_FOREACH PARENTESIS_C LLAVE_A SENTENCIA LLAVE_C
;
SENTENCIA_FOREACH ::= 
    IDENTIFIER_VARIABLE AS IDENTIFIER_VARIABLE OP_RELACIONAL IDENTIFIER_VARIABLE |
    IDENTIFIER_VARIABLE AS IDENTIFIER_VARIABLE OP_RELACIONAL IDS 
;